// This file is auto-generated by @hey-api/openapi-ts

export type AdmissionDecision = {
    userId: UserId;
    status: 'TBD' | 'ACCEPTED' | 'REJECTED' | 'WAITLISTED';
    admittedPro: boolean;
    response: 'PENDING' | 'ACCEPTED' | 'DECLINED';
    emailSent: boolean;
    reimbursementValue: number;
};

export type AdmissionDecisionUpdate = {
    userId: UserId;
    status: 'TBD' | 'ACCEPTED' | 'REJECTED' | 'WAITLISTED';
    admittedPro: boolean;
    reimbursementValue: number;
};

export type AttendeeProfile = {
    userId: UserId;
    displayName: string;
    avatarUrl: string;
    discordTag: string;
    points: number;
    pointsAccumulated: number;
    foodWave: number;
};

export type AttendeeProfileCreateRequest = {
    discordTag: string;
    displayName: string;
    avatarId: string;
};

export type AttendeeProfileRanking = {
    ranking: number;
};

export type AttendeeProfileUpdateRequest = {
    discordTag?: string;
    displayName?: string;
    avatarId?: string;
};

export type CreateEventRequest = {
    isStaff: boolean;
    name: string;
    description: string;
    startTime: number;
    endTime: number;
    exp?: number;
    eventType: 'MEAL' | 'SPEAKER' | 'WORKSHOP' | 'MINIEVENT' | 'QNA' | 'MEETING' | 'STAFFSHIFT' | 'OTHER';
    locations: Array<Location>;
    isAsync: boolean;
    mapImageUrl?: string;
    sponsor?: string;
    points: number;
    isPrivate: boolean;
    displayOnStaffCheckIn?: boolean;
    isPro: boolean;
};

export type CreateSponsorRequest = {
    email: SponsorEmail;
};

export type DecisionStatistic = {
    accepted: number;
    rejected: number;
    waitlisted: number;
    tbd: number;
};

export type Degree = "Associates' Degree" | "Bachelors' Degree " | "Masters' Degree" | 'PhD' | 'Graduated' | 'Other' | 'N/A' | '';

export type DeleteSponsorRequest = {
    userId: UserId;
};

export type Event = {
    eventId: EventId;
    isStaff: boolean;
    name: string;
    description: string;
    startTime: number;
    endTime: number;
    exp?: number;
    eventType: 'MEAL' | 'SPEAKER' | 'WORKSHOP' | 'MINIEVENT' | 'QNA' | 'MEETING' | 'STAFFSHIFT' | 'OTHER';
    locations: Array<Location>;
    isAsync: boolean;
    mapImageUrl?: string;
    sponsor?: string;
    points: number;
    isPrivate: boolean;
    displayOnStaffCheckIn?: boolean;
    isPro: boolean;
};

export type EventFollowers = {
    eventId: EventId;
    followers: Array<UserId>;
};

export type EventId = string;

export type EventStatistic = {
    eventId: EventId;
    attendees: number;
};

export type Events = {
    events: Array<Event>;
};

export type Gender = 'Male' | 'Female' | 'Non-Binary' | 'Other' | 'Prefer Not To Answer' | '';

export type HackInterest = 'Attending technical workshops' | 'Submitting a project to win prizes' | 'Participating in mini-events' | 'Meeting new people' | 'Working with mentors to get feedback' | 'Company Q&As and networking events' | 'OTHER';

export type HackOutreach = 'Instagram' | 'Twitter/X' | 'TikTok' | 'Discord' | 'Facebook' | 'LinkedIn' | 'Reddit' | 'Word of Mouth' | 'CS Department Email' | 'Posters/Flyers on Campus' | 'Slack' | 'HackIllinois Newsletter' | 'OTHER';

export type Jwt = string;

export type ListRoles = {
    userIds: Array<UserId>;
};

export type Location = {
    description: string;
    latitude: number;
    longitude: number;
};

export type MailInfo = {
    templateId: string;
    recipients: Array<string>;
    scheduleTime?: string;
    subs?: {};
    recipientSubs?: Array<{}>;
};

export type MailSendResults = {
    results: {
        total_rejected_recipients: number;
        total_accepted_recipients: number;
        id: string;
    };
};

export type MentorAttendanceRequest = {
    mentorId: MentorId;
};

export type MentorCreateOfficeHours = {
    mentorName: string;
};

export type MentorId = string;

export type MentorOfficeHours = MentorCreateOfficeHours & {
    mentorId: MentorId;
    attendees: Array<UserId>;
};

export type NewsletterId = string;

export type NewsletterSubscription = {
    newsletterId: NewsletterId;
    subscribers: Array<string>;
};

export type NewsletterSubscriptions = Array<NewsletterSubscription>;

export type NotificationMessage = {
    sender: UserId;
    title: string;
    body: string;
    sent: Array<UserId>;
    failed: Array<UserId>;
};

export type NotificationMessages = Array<NotificationMessage>;

export type NotificationSend = {
    sent: Array<UserId>;
    failed: Array<UserId>;
    time_ms: number;
};

export type NotificationSendRequest = {
    title: string;
    body: string;
    role?: Role;
    eventId?: EventId;
    staffShift?: EventId;
    foodWave?: number;
    userIds?: Array<UserId>;
};

export type Order = {
    userId: UserId;
    items: {
        [key: string]: number;
    };
};

export type OrderQrCode = {
    QRCode: string;
};

export type OrderRedeem = {
    userId: UserId;
    items: Array<{
        itemId: ShopItemId;
        name: string;
        quantity: number;
    }>;
};

/**
 * The QR code token. Note: This is not the full hackillinois:// uri but just the QR token part.
 */
export type OrderRedeemRequest = {
    QRCode: string;
};

export type ProfileLeaderboardEntries = {
    profiles: Array<ProfileLeaderboardEntry>;
};

export type ProfileLeaderboardEntry = {
    displayName: string;
    points: number;
    avatarUrl: string;
};

/**
 * The number of items to return.
 * Must be [1, 25], inclusive.
 */
export type ProfileLeaderboardQueryLimit = number;

/**
 * The provider to use for authentication. Attendees use GitHub and staff use Google.
 */
export type Provider = 'github' | 'google' | 'sponsor';

/**
 * A user's QR code
 */
export type QrInfo = {
    userId: UserId;
    /**
     * QR code URI for the user
     */
    qrInfo: string;
};

export type RsvpStatistic = {
    accepted: number;
    declined: number;
    pending: number;
};

export type Race = 'American Indian or Alaska Native' | 'Arab or Middle Eastern' | 'Black or African American' | 'East Asian' | 'Hispanic or Latino' | 'Native Hawaiian or Pacific Islander' | 'South East Asian' | 'South Asian' | 'White' | 'Other' | 'Prefer Not To Answer';

export type RedirectUrl = string;

export type RefreshToken = {
    token: Jwt;
};

export type RegisterDeviceToken = {
    deviceToken: string;
};

export type RegistrationApplication = RegistrationApplicationRequest & {
    userId: UserId;
    hasSubmitted: boolean;
};

export type RegistrationApplicationRequest = {
    preferredName: string;
    legalName: string;
    emailAddress: string | '';
    gender: Gender;
    race: Array<Race>;
    resumeFileName?: string;
    requestedTravelReimbursement: boolean;
    location: string;
    degree: Degree;
    major: string;
    minor?: string;
    university: string;
    gradYear: number;
    hackInterest: Array<HackInterest>;
    hackOutreach: Array<HackOutreach>;
    dietaryRestrictions: Array<string>;
    hackEssay1: string;
    hackEssay2: string;
    optionalEssay?: string;
    proEssay?: string;
    considerForGeneral?: boolean;
};

export type RegistrationChallengeInput = {
    people: {
        [key: string]: number;
    };
    alliances: Array<Array<string>>;
    attempts: number;
    complete: boolean;
};

export type RegistrationChallengeSolve = {
    solution: number;
};

/**
 * If registration is currently open or not
 */
export type RegistrationStatus = {
    alive: boolean;
};

export type ResumeBookEntry = {
    userId: UserId;
    emailAddress: string | '';
    legalName: string;
    location: string;
    university: string;
    degree: Degree;
    major: string;
    minor?: string;
    gradYear: number;
};

export type ResumeBookFilter = {
    graduations?: Array<number | null>;
    majors?: Array<string>;
    degrees?: Array<string>;
};

export type ResumeDownloadUrl = {
    url: string;
};

export type ResumeUploadUrl = ResumeDownloadUrl & {
    fields?: unknown;
};

export type Role = 'ADMIN' | 'STAFF' | 'MENTOR' | 'APPLICANT' | 'ATTENDEE' | 'USER' | 'SPONSOR' | 'BLOBSTORE' | 'PRO';

export type Roles = {
    id: UserId;
    roles: Array<Role>;
};

export type ScanAttendee = {
    success: true;
    userId: UserId;
    dietaryRestrictions: Array<string>;
};

export type ScanAttendeeRequest = {
    eventId: EventId;
    /**
     * The scanned QR code token, not the hackillinois:// uri
     */
    attendeeQRCode: string;
};

export type ScanEvent = {
    success: true;
    /**
     * Points added from checking into the event
     */
    points: number;
};

export type ScanEventRequest = {
    eventId: EventId;
};

export type Shifts = {
    shifts: Array<Event>;
};

export type ShopItem = {
    itemId: ShopItemId;
    name: string;
    price: number;
    isRaffle: boolean;
    quantity: number;
    imageURL: string;
};

export type ShopItemCreateRequest = {
    name: string;
    price: number;
    isRaffle: boolean;
    quantity: number;
    imageURL: string;
};

export type ShopItemId = string;

export type ShopItemStatistic = {
    itemId: ShopItemId;
    purchased: number;
};

export type ShopItemUpdateRequest = {
    name?: string;
    price?: number;
    isRaffle?: boolean;
    quantity?: number;
    imageURL?: string;
};

export type ShopItems = Array<ShopItem>;

export type Sponsor = {
    userId: UserId;
    email: SponsorEmail;
};

export type SponsorEmail = string;

export type SponsorLogin = {
    token: Jwt;
};

export type SponsorLoginRequest = {
    email: SponsorEmail;
    code: string;
};

export type StatisticLog = {
    timestamp: number;
    events: Array<EventStatistic>;
    decision: DecisionStatistic;
    rsvp: RsvpStatistic;
    shopItems: Array<ShopItemStatistic>;
};

/**
 * The number of items to return.
 * Must be [1, 25], inclusive.
 */
export type StatisticLogFilterLimitSchema = number;

export type StatisticLogs = Array<StatisticLog>;

export type SubscribeRequest = {
    listName: NewsletterId;
    emailAddress: string;
};

export type UpdateEventRequest = {
    isStaff?: boolean;
    name?: string;
    description?: string;
    startTime?: number;
    endTime?: number;
    exp?: number;
    eventType?: 'MEAL' | 'SPEAKER' | 'WORKSHOP' | 'MINIEVENT' | 'QNA' | 'MEETING' | 'STAFFSHIFT' | 'OTHER';
    locations?: Array<Location>;
    isAsync?: boolean;
    mapImageUrl?: string;
    sponsor?: string;
    points?: number;
    isPrivate?: boolean;
    displayOnStaffCheckIn?: boolean;
    isPro?: boolean;
    eventId: EventId;
};

/**
 * A user's events they are following
 */
export type UserFollowing = {
    userId: UserId;
    following: Array<EventId>;
};

/**
 * Id of a specific user. Can start with github or google.
 */
export type UserId = string;

/**
 * A user's info
 */
export type UserInfo = {
    userId: UserId;
    name: string;
    email: string;
};

export type VersionResponse = {
    /**
     * The version
     */
    version: string;
};

export type GetAdmissionNotsentData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admission/notsent/';
};

export type GetAdmissionNotsentResponses = {
    /**
     * The decisions
     */
    200: Array<AdmissionDecision>;
};

export type GetAdmissionNotsentResponse = GetAdmissionNotsentResponses[keyof GetAdmissionNotsentResponses];

export type GetAdmissionRsvpData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admission/rsvp/';
};

export type GetAdmissionRsvpErrors = {
    /**
     * Admission rsvp was not found
     */
    404: {
        error: 'DecisionNotFound';
        message: "Couldn't find your decision!";
    };
};

export type GetAdmissionRsvpError = GetAdmissionRsvpErrors[keyof GetAdmissionRsvpErrors];

export type GetAdmissionRsvpResponses = {
    /**
     * The admission rsvp information
     */
    200: AdmissionDecision;
};

export type GetAdmissionRsvpResponse = GetAdmissionRsvpResponses[keyof GetAdmissionRsvpResponses];

export type GetAdmissionRsvpStaffData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admission/rsvp/staff/';
};

export type GetAdmissionRsvpStaffResponses = {
    /**
     * All admission rsvps
     */
    200: Array<AdmissionDecision>;
};

export type GetAdmissionRsvpStaffResponse = GetAdmissionRsvpStaffResponses[keyof GetAdmissionRsvpStaffResponses];

export type PutAdmissionRsvpByDecisionData = {
    body?: never;
    path: {
        decision: 'accept' | 'decline';
    };
    query?: never;
    url: '/admission/rsvp/{decision}/';
};

export type PutAdmissionRsvpByDecisionErrors = {
    /**
     * Not accepted so can't make a decision
     */
    403: {
        error: 'NotAccepted';
        message: "You weren't accepted, you cannot accept/decline this decision";
    };
    /**
     * One of:
     * - DecisionNotFound: Couldn't find user's decision
     * - NotFound: Couldn't find user's application
     *
     * **See examples dropdown below**
     */
    404: {
        error: 'DecisionNotFound';
        message: "Couldn't find your decision!";
    } | {
        error: 'NotFound';
        message: "Couldn't find your registration";
    };
    /**
     * Already RSVPd
     */
    409: {
        error: 'AlreadyRSVPed';
        message: "You've already RSVPed!";
    };
};

export type PutAdmissionRsvpByDecisionError = PutAdmissionRsvpByDecisionErrors[keyof PutAdmissionRsvpByDecisionErrors];

export type PutAdmissionRsvpByDecisionResponses = {
    /**
     * The updated decision
     */
    200: AdmissionDecision;
};

export type PutAdmissionRsvpByDecisionResponse = PutAdmissionRsvpByDecisionResponses[keyof PutAdmissionRsvpByDecisionResponses];

export type GetAdmissionRsvpByIdData = {
    body?: never;
    path: {
        id: UserId;
    };
    query?: never;
    url: '/admission/rsvp/{id}/';
};

export type GetAdmissionRsvpByIdErrors = {
    /**
     * Admission rsvp was not found
     */
    404: {
        error: 'DecisionNotFound';
        message: "Couldn't find your decision!";
    };
};

export type GetAdmissionRsvpByIdError = GetAdmissionRsvpByIdErrors[keyof GetAdmissionRsvpByIdErrors];

export type GetAdmissionRsvpByIdResponses = {
    /**
     * The admission rsvp information
     */
    200: AdmissionDecision;
};

export type GetAdmissionRsvpByIdResponse = GetAdmissionRsvpByIdResponses[keyof GetAdmissionRsvpByIdResponses];

export type PutAdmissionUpdateData = {
    body?: Array<AdmissionDecisionUpdate>;
    path?: never;
    query?: never;
    url: '/admission/update/';
};

export type PutAdmissionUpdateErrors = {
    /**
     * A applicant's application was not found
     */
    404: {
        error: 'NotFound';
        message: "Couldn't find your registration";
    };
};

export type PutAdmissionUpdateError = PutAdmissionUpdateErrors[keyof PutAdmissionUpdateErrors];

export type PutAdmissionUpdateResponses = {
    /**
     * Successfully updated
     */
    200: {
        success: true;
    };
};

export type PutAdmissionUpdateResponse = PutAdmissionUpdateResponses[keyof PutAdmissionUpdateResponses];

export type GetAuthDevData = {
    body?: never;
    path?: never;
    query: {
        token: Jwt;
    };
    url: '/auth/dev/';
};

export type GetAuthDevResponses = {
    /**
     * The authentication JWT
     */
    200: {
        Authorization: Jwt;
    };
};

export type GetAuthDevResponse = GetAuthDevResponses[keyof GetAuthDevResponses];

export type GetAuthLoginByProviderData = {
    body?: never;
    path: {
        provider: Provider;
    };
    query?: {
        device?: 'admin' | 'dev' | 'web' | 'ios' | 'android' | 'challenge' | 'puzzle';
        redirect?: string;
    };
    url: '/auth/login/{provider}/';
};

export type GetAuthLoginByProviderErrors = {
    /**
     * The redirect url requested is invalid
     */
    400: {
        error: 'BadRedirectUrl';
        message: 'The redirect url provided is invalid, please provide one of the following: `https://admin.hackillinois.org/auth/`, `https://adonix.hackillinois.org/auth/dev/`, `https://hackillinois.org/auth/`, `https://adonix.hackillinois.org/auth/dev/`, `hackillinois://login/`, `hackillinois://login/`, `https://vault.hackillinois.org/auth/`, `/^http:\\/\\/localhost:\\d+\\/auth\\/$/`, `/^https:\\/\\/[a-z0-9-]+--(hackillinois|hackillinois-admin)\\.netlify\\.app\\/auth\\/$/`';
    };
};

export type GetAuthLoginByProviderError = GetAuthLoginByProviderErrors[keyof GetAuthLoginByProviderErrors];

export type GetAuthRolesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/roles/';
};

export type GetAuthRolesResponses = {
    /**
     * The roles
     */
    200: Roles;
};

export type GetAuthRolesResponse = GetAuthRolesResponses[keyof GetAuthRolesResponses];

export type GetAuthRolesListByRoleData = {
    body?: never;
    path: {
        role: Role;
    };
    query?: never;
    url: '/auth/roles/list/{role}/';
};

export type GetAuthRolesListByRoleResponses = {
    /**
     * The user ids that have the specified role
     */
    200: ListRoles;
};

export type GetAuthRolesListByRoleResponse = GetAuthRolesListByRoleResponses[keyof GetAuthRolesListByRoleResponses];

export type GetAuthRolesByIdData = {
    body?: never;
    path: {
        id: UserId;
    };
    query?: never;
    url: '/auth/roles/{id}/';
};

export type GetAuthRolesByIdErrors = {
    /**
     * Couldn't find the user specified
     */
    404: {
        error: 'NotFound';
        message: 'Failed to find user';
    };
};

export type GetAuthRolesByIdError = GetAuthRolesByIdErrors[keyof GetAuthRolesByIdErrors];

export type GetAuthRolesByIdResponses = {
    /**
     * The roles
     */
    200: Roles;
};

export type GetAuthRolesByIdResponse = GetAuthRolesByIdResponses[keyof GetAuthRolesByIdResponses];

export type DeleteAuthRolesByIdByRoleData = {
    body?: never;
    path: {
        id: UserId;
        role: Role;
    };
    query?: never;
    url: '/auth/roles/{id}/{role}/';
};

export type DeleteAuthRolesByIdByRoleErrors = {
    /**
     * Couldn't find the user specified
     */
    404: {
        error: 'NotFound';
        message: 'Failed to find user';
    };
};

export type DeleteAuthRolesByIdByRoleError = DeleteAuthRolesByIdByRoleErrors[keyof DeleteAuthRolesByIdByRoleErrors];

export type DeleteAuthRolesByIdByRoleResponses = {
    /**
     * The updated roles
     */
    200: Roles;
};

export type DeleteAuthRolesByIdByRoleResponse = DeleteAuthRolesByIdByRoleResponses[keyof DeleteAuthRolesByIdByRoleResponses];

export type PutAuthRolesByIdByRoleData = {
    body?: never;
    path: {
        id: UserId;
        role: Role;
    };
    query?: never;
    url: '/auth/roles/{id}/{role}/';
};

export type PutAuthRolesByIdByRoleErrors = {
    /**
     * Couldn't find the user specified
     */
    404: {
        error: 'NotFound';
        message: 'Failed to find user';
    };
};

export type PutAuthRolesByIdByRoleError = PutAuthRolesByIdByRoleErrors[keyof PutAuthRolesByIdByRoleErrors];

export type PutAuthRolesByIdByRoleResponses = {
    /**
     * The updated roles
     */
    200: Roles;
};

export type PutAuthRolesByIdByRoleResponse = PutAuthRolesByIdByRoleResponses[keyof PutAuthRolesByIdByRoleResponses];

export type PostAuthSponsorLoginData = {
    body?: SponsorLoginRequest;
    path?: never;
    query?: never;
    url: '/auth/sponsor/login/';
};

export type PostAuthSponsorLoginErrors = {
    /**
     * The email or code sent was invalid
     */
    403: {
        error: 'BadCode';
        message: 'The code entered was invalid';
    };
};

export type PostAuthSponsorLoginError = PostAuthSponsorLoginErrors[keyof PostAuthSponsorLoginErrors];

export type PostAuthSponsorLoginResponses = {
    /**
     * Successfully logged in, returns the auth token for future requests
     */
    200: SponsorLogin;
};

export type PostAuthSponsorLoginResponse = PostAuthSponsorLoginResponses[keyof PostAuthSponsorLoginResponses];

export type PostAuthSponsorVerifyData = {
    body?: never;
    path?: never;
    query: {
        email: SponsorEmail;
    };
    url: '/auth/sponsor/verify/';
};

export type PostAuthSponsorVerifyResponses = {
    /**
     * Sent a code if the email provided was valid
     */
    200: {
        success: true;
    };
};

export type PostAuthSponsorVerifyResponse = PostAuthSponsorVerifyResponses[keyof PostAuthSponsorVerifyResponses];

export type GetAuthTokenRefreshData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/token/refresh/';
};

export type GetAuthTokenRefreshResponses = {
    /**
     * The new refreshed token
     */
    200: RefreshToken;
};

export type GetAuthTokenRefreshResponse = GetAuthTokenRefreshResponses[keyof GetAuthTokenRefreshResponses];

export type GetAuthByProviderCallbackData = {
    body?: never;
    path: {
        provider: Provider;
    };
    query: {
        state: RedirectUrl;
    };
    url: '/auth/{provider}/callback/';
};

export type GetAuthByProviderCallbackErrors = {
    /**
     * The redirect url requested is invalid
     */
    400: {
        error: 'BadRedirectUrl';
        message: 'The redirect url provided is invalid, please provide one of the following: `https://admin.hackillinois.org/auth/`, `https://adonix.hackillinois.org/auth/dev/`, `https://hackillinois.org/auth/`, `https://adonix.hackillinois.org/auth/dev/`, `hackillinois://login/`, `hackillinois://login/`, `https://vault.hackillinois.org/auth/`, `/^http:\\/\\/localhost:\\d+\\/auth\\/$/`, `/^https:\\/\\/[a-z0-9-]+--(hackillinois|hackillinois-admin)\\.netlify\\.app\\/auth\\/$/`';
    };
    /**
     * Authorization failed
     */
    401: {
        error: 'AuthenticationFailed';
        message: 'Failed to authenticate (did the login session expire?) - please try again';
    };
};

export type GetAuthByProviderCallbackError = GetAuthByProviderCallbackErrors[keyof GetAuthByProviderCallbackErrors];

export type GetEventData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/event/';
};

export type GetEventResponses = {
    /**
     * The events
     */
    200: Events;
};

export type GetEventResponse = GetEventResponses[keyof GetEventResponses];

export type PostEventData = {
    body?: CreateEventRequest;
    path?: never;
    query?: never;
    url: '/event/';
};

export type PostEventResponses = {
    /**
     * The new event
     */
    200: Event;
};

export type PostEventResponse = PostEventResponses[keyof PostEventResponses];

export type PutEventData = {
    body?: UpdateEventRequest;
    path?: never;
    query?: never;
    url: '/event/';
};

export type PutEventErrors = {
    /**
     * Couldn't find the event to update
     */
    404: {
        error: 'NotFound';
        message: 'Could not find event';
    };
};

export type PutEventError = PutEventErrors[keyof PutEventErrors];

export type PutEventResponses = {
    /**
     * The updated event
     */
    200: Event;
};

export type PutEventResponse = PutEventResponses[keyof PutEventResponses];

export type GetEventFollowersByIdData = {
    body?: never;
    path: {
        id: EventId;
    };
    query?: never;
    url: '/event/followers/{id}/';
};

export type GetEventFollowersByIdErrors = {
    /**
     * Couldn't find the event specified
     */
    404: {
        error: 'NotFound';
        message: 'Could not find event';
    };
};

export type GetEventFollowersByIdError = GetEventFollowersByIdErrors[keyof GetEventFollowersByIdErrors];

export type GetEventFollowersByIdResponses = {
    /**
     * The followers
     */
    200: EventFollowers;
};

export type GetEventFollowersByIdResponse = GetEventFollowersByIdResponses[keyof GetEventFollowersByIdResponses];

export type GetEventStaffData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/event/staff/';
};

export type GetEventStaffErrors = {
    /**
     * Couldn't find the event specified
     */
    404: {
        error: 'NotFound';
        message: 'Could not find event';
    };
};

export type GetEventStaffError = GetEventStaffErrors[keyof GetEventStaffErrors];

export type GetEventStaffResponses = {
    /**
     * The events
     */
    200: Events;
};

export type GetEventStaffResponse = GetEventStaffResponses[keyof GetEventStaffResponses];

export type DeleteEventByIdData = {
    body?: never;
    path: {
        id: EventId;
    };
    query?: never;
    url: '/event/{id}/';
};

export type DeleteEventByIdErrors = {
    /**
     * Couldn't find the event to delete
     */
    404: {
        error: 'NotFound';
        message: 'Could not find event';
    };
};

export type DeleteEventByIdError = DeleteEventByIdErrors[keyof DeleteEventByIdErrors];

export type DeleteEventByIdResponses = {
    /**
     * Successfully deleted
     */
    200: {
        success: true;
    };
};

export type DeleteEventByIdResponse = DeleteEventByIdResponses[keyof DeleteEventByIdResponses];

export type GetEventByIdData = {
    body?: never;
    path: {
        id: EventId;
    };
    query?: never;
    url: '/event/{id}/';
};

export type GetEventByIdErrors = {
    /**
     * Couldn't find the event specified.
     * This also occurs if the user doesn't have permission to view this event.
     */
    404: {
        error: 'NotFound';
        message: 'Could not find event';
    };
};

export type GetEventByIdError = GetEventByIdErrors[keyof GetEventByIdErrors];

export type GetEventByIdResponses = {
    /**
     * The event
     */
    200: Event;
};

export type GetEventByIdResponse = GetEventByIdResponses[keyof GetEventByIdResponses];

export type PostMailSendData = {
    body?: MailInfo;
    path?: never;
    query?: never;
    url: '/mail/send/';
};

export type PostMailSendResponses = {
    /**
     * The upload url
     */
    200: MailSendResults;
};

export type PostMailSendResponse = PostMailSendResponses[keyof PostMailSendResponses];

export type GetMentorData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/mentor/';
};

export type GetMentorResponses = {
    /**
     * The office hours
     */
    200: Array<MentorOfficeHours>;
};

export type GetMentorResponse = GetMentorResponses[keyof GetMentorResponses];

export type PostMentorData = {
    body?: MentorCreateOfficeHours;
    path?: never;
    query?: never;
    url: '/mentor/';
};

export type PostMentorResponses = {
    /**
     * The new office hours
     */
    200: MentorOfficeHours;
};

export type PostMentorResponse = PostMentorResponses[keyof PostMentorResponses];

export type PostMentorAttendanceData = {
    body?: MentorAttendanceRequest;
    path?: never;
    query?: never;
    url: '/mentor/attendance/';
};

export type PostMentorAttendanceErrors = {
    /**
     * Already checked in to office hours
     */
    400: {
        error: 'AlreadyCheckedIn';
        message: "You're already checked in to this event";
    };
    /**
     * Failed to find the mentor requested
     */
    404: {
        error: 'NotFound';
        message: 'Failed to find mentor';
    };
};

export type PostMentorAttendanceError = PostMentorAttendanceErrors[keyof PostMentorAttendanceErrors];

export type PostMentorAttendanceResponses = {
    /**
     * Successfully checked in, returns the points rewarded
     */
    200: {
        /**
         * The points rewarded for checking in
         */
        points: number;
    };
};

export type PostMentorAttendanceResponse = PostMentorAttendanceResponses[keyof PostMentorAttendanceResponses];

export type DeleteMentorByIdData = {
    body?: never;
    path: {
        id: MentorId;
    };
    query?: never;
    url: '/mentor/{id}/';
};

export type DeleteMentorByIdErrors = {
    /**
     * Failed to find the mentor requested
     */
    404: {
        error: 'NotFound';
        message: 'Failed to find mentor';
    };
};

export type DeleteMentorByIdError = DeleteMentorByIdErrors[keyof DeleteMentorByIdErrors];

export type DeleteMentorByIdResponses = {
    /**
     * Successfully deleted
     */
    200: {
        success: true;
    };
};

export type DeleteMentorByIdResponse = DeleteMentorByIdResponses[keyof DeleteMentorByIdResponses];

export type GetNewsletterData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/newsletter/';
};

export type GetNewsletterResponses = {
    /**
     * Successfully got the subscribers
     */
    200: NewsletterSubscriptions;
};

export type GetNewsletterResponse = GetNewsletterResponses[keyof GetNewsletterResponses];

export type DeleteNewsletterSubscribeData = {
    body?: SubscribeRequest;
    path?: never;
    query?: never;
    url: '/newsletter/subscribe/';
};

export type DeleteNewsletterSubscribeResponses = {
    /**
     * If the email was subscribed, it no longer is. For privacy reasons, whether this email was subscribed or not is hidden.
     */
    200: {
        success: true;
    };
};

export type DeleteNewsletterSubscribeResponse = DeleteNewsletterSubscribeResponses[keyof DeleteNewsletterSubscribeResponses];

export type PostNewsletterSubscribeData = {
    body?: SubscribeRequest;
    path?: never;
    query?: never;
    url: '/newsletter/subscribe/';
};

export type PostNewsletterSubscribeResponses = {
    /**
     * Successfully added email to newsletter
     */
    200: {
        success: true;
    };
};

export type PostNewsletterSubscribeResponse = PostNewsletterSubscribeResponses[keyof PostNewsletterSubscribeResponses];

export type GetNewsletterByIdData = {
    body?: never;
    path: {
        id: NewsletterId;
    };
    query?: never;
    url: '/newsletter/{id}/';
};

export type GetNewsletterByIdErrors = {
    /**
     * That newsletter does not exist
     */
    404: {
        error: 'NotFound';
        message: "That newsletter doesn't exist!";
    };
};

export type GetNewsletterByIdError = GetNewsletterByIdErrors[keyof GetNewsletterByIdErrors];

export type GetNewsletterByIdResponses = {
    /**
     * Successfully got the subscribers
     */
    200: NewsletterSubscription;
};

export type GetNewsletterByIdResponse = GetNewsletterByIdResponses[keyof GetNewsletterByIdResponses];

export type GetNotificationData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/notification/';
};

export type GetNotificationResponses = {
    /**
     * All the notifications
     */
    200: NotificationMessages;
};

export type GetNotificationResponse = GetNotificationResponses[keyof GetNotificationResponses];

export type PostNotificationData = {
    body?: RegisterDeviceToken;
    path?: never;
    query?: never;
    url: '/notification/';
};

export type PostNotificationResponses = {
    /**
     * Successfully registered
     */
    200: {
        success: true;
    };
};

export type PostNotificationResponse = PostNotificationResponses[keyof PostNotificationResponses];

export type PostNotificationSendData = {
    body?: NotificationSendRequest;
    path?: never;
    query?: never;
    url: '/notification/send/';
};

export type PostNotificationSendResponses = {
    /**
     * The result of the sent batch
     */
    200: NotificationSend;
};

export type PostNotificationSendResponse = PostNotificationSendResponses[keyof PostNotificationSendResponses];

export type GetProfileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/profile/';
};

export type GetProfileErrors = {
    /**
     * Couldn't find the profile (is it created yet?)
     */
    404: {
        error: 'NotFound';
        message: "Couldn't find the profile";
    };
};

export type GetProfileError = GetProfileErrors[keyof GetProfileErrors];

export type GetProfileResponses = {
    /**
     * The profile
     */
    200: AttendeeProfile;
};

export type GetProfileResponse = GetProfileResponses[keyof GetProfileResponses];

export type PostProfileData = {
    body?: AttendeeProfileCreateRequest;
    path?: never;
    query?: never;
    url: '/profile/';
};

export type PostProfileErrors = {
    /**
     * Profile already created
     */
    400: {
        error: 'AlreadyExists';
        message: 'Your profile is already created!';
    };
    /**
     * Couldn't find registration information
     */
    404: {
        error: 'NotFound';
        message: "Couldn't find your registration";
    };
};

export type PostProfileError = PostProfileErrors[keyof PostProfileErrors];

export type PostProfileResponses = {
    /**
     * The created profile
     */
    200: AttendeeProfile;
};

export type PostProfileResponse = PostProfileResponses[keyof PostProfileResponses];

export type PutProfileData = {
    body?: AttendeeProfileUpdateRequest;
    path?: never;
    query?: never;
    url: '/profile/';
};

export type PutProfileErrors = {
    /**
     * Couldn't find
     */
    404: {
        error: 'NotFound';
        message: "Couldn't find the profile";
    };
};

export type PutProfileError = PutProfileErrors[keyof PutProfileErrors];

export type PutProfileResponses = {
    /**
     * The ranking
     */
    200: AttendeeProfile;
};

export type PutProfileResponse = PutProfileResponses[keyof PutProfileResponses];

export type GetProfileLeaderboardData = {
    body?: never;
    path?: never;
    query?: {
        limit?: ProfileLeaderboardQueryLimit;
    };
    url: '/profile/leaderboard/';
};

export type GetProfileLeaderboardResponses = {
    /**
     * The leaderboard
     */
    200: ProfileLeaderboardEntries;
};

export type GetProfileLeaderboardResponse = GetProfileLeaderboardResponses[keyof GetProfileLeaderboardResponses];

export type GetProfileRankingData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/profile/ranking/';
};

export type GetProfileRankingErrors = {
    /**
     * Couldn't find the profile (is it created yet?)
     */
    404: {
        error: 'NotFound';
        message: "Couldn't find the profile";
    };
};

export type GetProfileRankingError = GetProfileRankingErrors[keyof GetProfileRankingErrors];

export type GetProfileRankingResponses = {
    /**
     * The ranking
     */
    200: AttendeeProfileRanking;
};

export type GetProfileRankingResponse = GetProfileRankingResponses[keyof GetProfileRankingResponses];

export type GetProfileByIdData = {
    body?: never;
    path: {
        id: UserId;
    };
    query?: never;
    url: '/profile/{id}/';
};

export type GetProfileByIdErrors = {
    /**
     * Couldn't find the profile
     */
    404: {
        error: 'NotFound';
        message: "Couldn't find the profile";
    };
};

export type GetProfileByIdError = GetProfileByIdErrors[keyof GetProfileByIdErrors];

export type GetProfileByIdResponses = {
    /**
     * The profile
     */
    200: AttendeeProfile;
};

export type GetProfileByIdResponse = GetProfileByIdResponses[keyof GetProfileByIdResponses];

export type PostPuzzleCreateData = {
    body?: {
        teamName: string;
    };
    path?: never;
    query?: never;
    url: '/puzzle/create/';
};

export type PostPuzzleCreateResponses = {
    /**
     * The newly created puzzle status
     */
    200: {
        userId: UserId;
        teamName: string;
        lastCorrect: number;
        score: number;
        problemComplete: Array<boolean>;
    };
};

export type PostPuzzleCreateResponse = PostPuzzleCreateResponses[keyof PostPuzzleCreateResponses];

export type GetPuzzleStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/puzzle/status/';
};

export type GetPuzzleStatusErrors = {
    /**
     * The user's puzzle hasn't been created yet
     */
    404: {
        error: 'NotCreated';
        message: 'You need to create a puzzle first!';
    };
};

export type GetPuzzleStatusError = GetPuzzleStatusErrors[keyof GetPuzzleStatusErrors];

export type GetPuzzleStatusResponses = {
    /**
     * The status
     */
    200: {
        userId: UserId;
        teamName: string;
        lastCorrect: number;
        score: number;
        problemComplete: Array<boolean>;
    };
};

export type GetPuzzleStatusResponse = GetPuzzleStatusResponses[keyof GetPuzzleStatusResponses];

export type PostPuzzleSubmitByQidData = {
    body?: {
        answer: string;
    };
    path: {
        qid: string;
    };
    query?: never;
    url: '/puzzle/submit/{qid}/';
};

export type PostPuzzleSubmitByQidErrors = {
    /**
     * The answer was incorrect
     */
    400: {
        error: 'IncorrectAnswer';
        message: 'Your answer was incorrect!';
    };
    /**
     * One of:
     * - NotCreated: The user's puzzle hasn't been created yet
     * - NotFound: The question requested doesn't exist
     *
     * **See examples dropdown below**
     */
    404: {
        error: 'NotCreated';
        message: 'You need to create a puzzle first!';
    } | {
        error: 'NotFound';
        message: "That question doesn't exist!";
    };
};

export type PostPuzzleSubmitByQidError = PostPuzzleSubmitByQidErrors[keyof PostPuzzleSubmitByQidErrors];

export type PostPuzzleSubmitByQidResponses = {
    /**
     * The new puzzle status
     */
    200: {
        userId: UserId;
        teamName: string;
        lastCorrect: number;
        score: number;
        problemComplete: Array<boolean>;
    };
};

export type PostPuzzleSubmitByQidResponse = PostPuzzleSubmitByQidResponses[keyof PostPuzzleSubmitByQidResponses];

export type GetRegistrationData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/registration/';
};

export type GetRegistrationErrors = {
    /**
     * Couldn't find registration information (make sure you create it first!)
     */
    404: {
        error: 'NotFound';
        message: "Couldn't find your registration";
    };
};

export type GetRegistrationError = GetRegistrationErrors[keyof GetRegistrationErrors];

export type GetRegistrationResponses = {
    /**
     * The registration information
     */
    200: RegistrationApplication;
};

export type GetRegistrationResponse = GetRegistrationResponses[keyof GetRegistrationResponses];

export type PostRegistrationData = {
    body?: RegistrationApplicationRequest;
    path?: never;
    query?: never;
    url: '/registration/';
};

export type PostRegistrationErrors = {
    /**
     * Registration is already submitted, cannot update anymore
     */
    400: {
        error: 'AlreadySubmitted';
        message: "You've already submitted your registration!";
    };
    /**
     * Registration is closed
     */
    403: {
        error: 'RegistrationClosed';
        message: 'Registration is closed, check back next year!';
    };
};

export type PostRegistrationError = PostRegistrationErrors[keyof PostRegistrationErrors];

export type PostRegistrationResponses = {
    /**
     * The new registration information
     */
    200: RegistrationApplicationRequest;
};

export type PostRegistrationResponse = PostRegistrationResponses[keyof PostRegistrationResponses];

export type GetRegistrationChallengeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/registration/challenge/';
};

export type GetRegistrationChallengeResponses = {
    /**
     * The challenge status
     */
    200: RegistrationChallengeInput;
};

export type GetRegistrationChallengeResponse = GetRegistrationChallengeResponses[keyof GetRegistrationChallengeResponses];

export type PostRegistrationChallengeData = {
    body?: RegistrationChallengeSolve;
    path?: never;
    query?: never;
    url: '/registration/challenge/';
};

export type PostRegistrationChallengeErrors = {
    /**
     * One of:
     * - IncorrectSolution: Incorrect answer, try again
     * - AlreadySolved: Already solved correctly
     *
     * **See examples dropdown below**
     */
    400: {
        error: 'IncorrectSolution';
        message: "That's not the correct answer, try again!";
    } | {
        error: 'AlreadySolved';
        message: "You've already solved the challenge!";
    };
    /**
     * Registration is closed
     */
    403: {
        error: 'RegistrationClosed';
        message: 'Registration is closed, check back next year!';
    };
};

export type PostRegistrationChallengeError = PostRegistrationChallengeErrors[keyof PostRegistrationChallengeErrors];

export type PostRegistrationChallengeResponses = {
    /**
     * Successfully solved, the new challenge status is returned
     */
    200: RegistrationChallengeInput;
};

export type PostRegistrationChallengeResponse = PostRegistrationChallengeResponses[keyof PostRegistrationChallengeResponses];

export type GetRegistrationStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/registration/status/';
};

export type GetRegistrationStatusResponses = {
    /**
     * The registration status
     */
    200: RegistrationStatus;
};

export type GetRegistrationStatusResponse = GetRegistrationStatusResponses[keyof GetRegistrationStatusResponses];

export type PostRegistrationSubmitData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/registration/submit/';
};

export type PostRegistrationSubmitErrors = {
    /**
     * Registration is already submitted, cannot update anymore
     */
    400: {
        error: 'AlreadySubmitted';
        message: "You've already submitted your registration!";
    };
    /**
     * Registration is closed
     */
    403: {
        error: 'RegistrationClosed';
        message: 'Registration is closed, check back next year!';
    };
    /**
     * Couldn't find registration information (make sure you create it first!)
     */
    404: {
        error: 'NotFound';
        message: "Couldn't find your registration";
    };
};

export type PostRegistrationSubmitError = PostRegistrationSubmitErrors[keyof PostRegistrationSubmitErrors];

export type PostRegistrationSubmitResponses = {
    /**
     * The new registration information
     */
    200: RegistrationApplicationRequest;
};

export type PostRegistrationSubmitResponse = PostRegistrationSubmitResponses[keyof PostRegistrationSubmitResponses];

export type GetRegistrationUseridByIdData = {
    body?: never;
    path: {
        id: UserId;
    };
    query?: never;
    url: '/registration/userid/{id}';
};

export type GetRegistrationUseridByIdErrors = {
    /**
     * Couldn't find registration information (make sure you create it first!)
     */
    404: {
        error: 'NotFound';
        message: "Couldn't find your registration";
    };
};

export type GetRegistrationUseridByIdError = GetRegistrationUseridByIdErrors[keyof GetRegistrationUseridByIdErrors];

export type GetRegistrationUseridByIdResponses = {
    /**
     * The registration information
     */
    200: RegistrationApplication;
};

export type GetRegistrationUseridByIdResponse = GetRegistrationUseridByIdResponses[keyof GetRegistrationUseridByIdResponses];

export type GetResumeDownloadData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/resume/download/';
};

export type GetResumeDownloadResponses = {
    /**
     * The download url
     */
    200: ResumeDownloadUrl;
};

export type GetResumeDownloadResponse = GetResumeDownloadResponses[keyof GetResumeDownloadResponses];

export type GetResumeDownloadByIdData = {
    body?: never;
    path: {
        id: UserId;
    };
    query?: never;
    url: '/resume/download/{id}';
};

export type GetResumeDownloadByIdResponses = {
    /**
     * The download url
     */
    200: ResumeDownloadUrl;
};

export type GetResumeDownloadByIdResponse = GetResumeDownloadByIdResponses[keyof GetResumeDownloadByIdResponses];

export type GetResumeUploadData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/resume/upload/';
};

export type GetResumeUploadResponses = {
    /**
     * The upload url
     */
    200: ResumeUploadUrl;
};

export type GetResumeUploadResponse = GetResumeUploadResponses[keyof GetResumeUploadResponses];

export type GetShopData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/shop/';
};

export type GetShopResponses = {
    /**
     * The shop items
     */
    200: ShopItems;
};

export type GetShopResponse = GetShopResponses[keyof GetShopResponses];

export type GetShopCartData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/shop/cart/';
};

export type GetShopCartResponses = {
    /**
     * List of items and quantity
     */
    200: Order;
};

export type GetShopCartResponse = GetShopCartResponses[keyof GetShopCartResponses];

export type GetShopCartQrData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/shop/cart/qr/';
};

export type GetShopCartQrErrors = {
    /**
     * Not enough quantity in shop
     */
    400: {
        error: 'InsufficientQuantity';
        message: 'Not enough of that item in the shop!';
    };
    /**
     * User doesn't have enough points to purchase
     */
    402: {
        error: 'InsufficientFunds';
        message: "You don't have enough points to purchase that item!";
    };
    /**
     * Shop Item doesn't exist
     */
    404: {
        error: 'NotFound';
        message: 'Shop item not found!';
    };
};

export type GetShopCartQrError = GetShopCartQrErrors[keyof GetShopCartQrErrors];

export type GetShopCartQrResponses = {
    /**
     * QR code
     */
    200: OrderQrCode;
};

export type GetShopCartQrResponse = GetShopCartQrResponses[keyof GetShopCartQrResponses];

export type PostShopCartRedeemData = {
    body?: OrderRedeemRequest;
    path?: never;
    query?: never;
    url: '/shop/cart/redeem/';
};

export type PostShopCartRedeemErrors = {
    /**
     * One of:
     * - InsufficientQuantity: Not enough quantity in shop
     * - QRExpired: QR Code Expired
     * - QRInvalid: QR Code Invalid (not expired)
     *
     * **See examples dropdown below**
     */
    400: {
        error: 'InsufficientQuantity';
        message: 'Not enough of that item in the shop!';
    } | {
        error: 'QRExpired';
        message: 'Your QR code has expired';
    } | {
        error: 'QRInvalid';
        message: 'Your QR code is invalid and unable to decrypt';
    };
    /**
     * Not enough points to purchase
     */
    402: {
        error: 'InsufficientFunds';
        message: "You don't have enough points to purchase that item!";
    };
    /**
     * Shop Item doesn't exist
     */
    404: {
        error: 'NotFound';
        message: 'Shop item not found!';
    };
};

export type PostShopCartRedeemError = PostShopCartRedeemErrors[keyof PostShopCartRedeemErrors];

export type PostShopCartRedeemResponses = {
    /**
     * The successfully purchased order
     */
    200: OrderRedeem;
};

export type PostShopCartRedeemResponse = PostShopCartRedeemResponses[keyof PostShopCartRedeemResponses];

export type DeleteShopCartByItemIdData = {
    body?: never;
    path: {
        itemId: ShopItemId;
    };
    query?: never;
    url: '/shop/cart/{itemId}/';
};

export type DeleteShopCartByItemIdErrors = {
    /**
     * Shop Item is not in user's cart
     */
    404: {
        error: 'NotFound';
        message: 'Shop item not found!';
    };
};

export type DeleteShopCartByItemIdError = DeleteShopCartByItemIdErrors[keyof DeleteShopCartByItemIdErrors];

export type DeleteShopCartByItemIdResponses = {
    /**
     * The successfully updated order
     */
    200: Order;
};

export type DeleteShopCartByItemIdResponse = DeleteShopCartByItemIdResponses[keyof DeleteShopCartByItemIdResponses];

export type PostShopCartByItemIdData = {
    body?: never;
    path: {
        itemId: ShopItemId;
    };
    query?: never;
    url: '/shop/cart/{itemId}/';
};

export type PostShopCartByItemIdErrors = {
    /**
     * Not enough quantity in shop
     */
    400: {
        error: 'InsufficientQuantity';
        message: 'Not enough of that item in the shop!';
    };
    /**
     * Not enough points to purchase
     */
    402: {
        error: 'InsufficientFunds';
        message: "You don't have enough points to purchase that item!";
    };
    /**
     * Shop Item doesn't exist
     */
    404: {
        error: 'NotFound';
        message: 'Shop item not found!';
    };
};

export type PostShopCartByItemIdError = PostShopCartByItemIdErrors[keyof PostShopCartByItemIdErrors];

export type PostShopCartByItemIdResponses = {
    /**
     * The successfully updated order
     */
    200: Order;
};

export type PostShopCartByItemIdResponse = PostShopCartByItemIdResponses[keyof PostShopCartByItemIdResponses];

export type PostShopItemData = {
    body?: ShopItemCreateRequest;
    path?: never;
    query?: never;
    url: '/shop/item/';
};

export type PostShopItemErrors = {
    /**
     * The item already exists
     */
    409: {
        error: 'AlreadyExists';
        message: 'An item with that id already exists, did you mean to update it instead?';
    };
};

export type PostShopItemError = PostShopItemErrors[keyof PostShopItemErrors];

export type PostShopItemResponses = {
    /**
     * The new item
     */
    200: ShopItem;
};

export type PostShopItemResponse = PostShopItemResponses[keyof PostShopItemResponses];

export type DeleteShopItemByIdData = {
    body?: never;
    path: {
        id: ShopItemId;
    };
    query?: never;
    url: '/shop/item/{id}/';
};

export type DeleteShopItemByIdErrors = {
    /**
     * Item doesn't exist
     */
    404: {
        error: 'NotFound';
        message: 'Shop item not found!';
    };
};

export type DeleteShopItemByIdError = DeleteShopItemByIdErrors[keyof DeleteShopItemByIdErrors];

export type DeleteShopItemByIdResponses = {
    /**
     * Successfully deleted
     */
    200: {
        success: true;
    };
};

export type DeleteShopItemByIdResponse = DeleteShopItemByIdResponses[keyof DeleteShopItemByIdResponses];

export type PutShopItemByIdData = {
    body?: ShopItemUpdateRequest;
    path: {
        id: ShopItemId;
    };
    query?: never;
    url: '/shop/item/{id}/';
};

export type PutShopItemByIdErrors = {
    /**
     * Item doesn't exist
     */
    404: {
        error: 'NotFound';
        message: 'Shop item not found!';
    };
};

export type PutShopItemByIdError = PutShopItemByIdErrors[keyof PutShopItemByIdErrors];

export type PutShopItemByIdResponses = {
    /**
     * The new item
     */
    200: ShopItem;
};

export type PutShopItemByIdResponse = PutShopItemByIdResponses[keyof PutShopItemByIdResponses];

export type GetShopRaffleByIdData = {
    body?: never;
    path: {
        id: ShopItemId;
    };
    query?: never;
    url: '/shop/raffle/{id}/';
};

export type GetShopRaffleByIdErrors = {
    /**
     * Item doesn't exist
     */
    404: {
        error: 'NotFound';
        message: 'Shop item not found!';
    };
};

export type GetShopRaffleByIdError = GetShopRaffleByIdErrors[keyof GetShopRaffleByIdErrors];

export type GetShopRaffleByIdResponses = {
    /**
     * The raffle winner
     */
    200: {
        userId: UserId;
    };
};

export type GetShopRaffleByIdResponse = GetShopRaffleByIdResponses[keyof GetShopRaffleByIdResponses];

export type DeleteSponsorData = {
    body?: DeleteSponsorRequest;
    path?: never;
    query?: never;
    url: '/sponsor/';
};

export type DeleteSponsorErrors = {
    /**
     * Sponsor not found
     */
    404: {
        error: 'Failed to find the sponsor';
        message: 'NotFound';
    };
};

export type DeleteSponsorError = DeleteSponsorErrors[keyof DeleteSponsorErrors];

export type DeleteSponsorResponses = {
    /**
     * Successfully deleted
     */
    200: {
        success: true;
    };
};

export type DeleteSponsorResponse = DeleteSponsorResponses[keyof DeleteSponsorResponses];

export type GetSponsorData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sponsor/';
};

export type GetSponsorResponses = {
    /**
     * All sponsors
     */
    200: Array<Sponsor>;
};

export type GetSponsorResponse = GetSponsorResponses[keyof GetSponsorResponses];

export type PostSponsorData = {
    body?: CreateSponsorRequest;
    path?: never;
    query?: never;
    url: '/sponsor/';
};

export type PostSponsorResponses = {
    /**
     * The newly created sponsor
     */
    200: Sponsor;
};

export type PostSponsorResponse = PostSponsorResponses[keyof PostSponsorResponses];

export type PostSponsorResumebookPagecountData = {
    body?: ResumeBookFilter;
    path?: never;
    query?: never;
    url: '/sponsor/resumebook/pagecount';
};

export type PostSponsorResumebookPagecountResponses = {
    /**
     * Total number of pages based on ENTRIES_PER_PAGE
     */
    200: {
        pageCount: number;
    };
};

export type PostSponsorResumebookPagecountResponse = PostSponsorResumebookPagecountResponses[keyof PostSponsorResumebookPagecountResponses];

export type PostSponsorResumebookByPageData = {
    body?: ResumeBookFilter;
    path: {
        page: number;
    };
    query?: never;
    url: '/sponsor/resumebook/{page}/';
};

export type PostSponsorResumebookByPageResponses = {
    /**
     * The list of admitted applicants for the specified page
     */
    200: Array<ResumeBookEntry>;
};

export type PostSponsorResumebookByPageResponse = PostSponsorResumebookByPageResponses[keyof PostSponsorResumebookByPageResponses];

export type PostStaffAttendanceData = {
    body?: {
        eventId: EventId;
    };
    path?: never;
    query?: never;
    url: '/staff/attendance/';
};

export type PostStaffAttendanceErrors = {
    /**
     * The event is no longer open for check in
     */
    400: {
        error: 'CodeExpired';
        message: 'The code for this event has expired';
    };
    /**
     * The specified event was not found
     */
    404: {
        error: 'NotFound';
        message: 'Could not find event';
    };
};

export type PostStaffAttendanceError = PostStaffAttendanceErrors[keyof PostStaffAttendanceErrors];

export type PostStaffAttendanceResponses = {
    /**
     * The scanned user's information
     */
    200: {
        success: true;
    };
};

export type PostStaffAttendanceResponse = PostStaffAttendanceResponses[keyof PostStaffAttendanceResponses];

export type PutStaffScanAttendeeData = {
    body?: ScanAttendeeRequest;
    path?: never;
    query?: never;
    url: '/staff/scan-attendee/';
};

export type PutStaffScanAttendeeErrors = {
    /**
     * One of:
     * - QRExpired: QR Code Expired
     * - QRInvalid: QR Code Invalid (not expired)
     * - AlreadyCheckedIn: User already checked in
     *
     * **See examples dropdown below**
     */
    400: {
        error: 'QRExpired';
        message: 'Your QR code has expired';
    } | {
        error: 'QRInvalid';
        message: 'Your QR code is invalid and unable to decrypt';
    } | {
        error: 'AlreadyCheckedIn';
        message: "You're already checked in to this event";
    };
    /**
     * attendeeQRCode has expired
     */
    401: {
        error: 'QRExpired';
        message: 'Your QR code has expired';
    };
    /**
     * Could not find the event to check into
     */
    404: {
        error: 'NotFound';
        message: 'Could not find event';
    };
};

export type PutStaffScanAttendeeError = PutStaffScanAttendeeErrors[keyof PutStaffScanAttendeeErrors];

export type PutStaffScanAttendeeResponses = {
    /**
     * The scanned user's information
     */
    200: ScanAttendee;
};

export type PutStaffScanAttendeeResponse = PutStaffScanAttendeeResponses[keyof PutStaffScanAttendeeResponses];

export type GetStaffShiftData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/staff/shift/';
};

export type GetStaffShiftErrors = {
    /**
     * User already checked in
     */
    400: {
        error: 'AlreadyCheckedIn';
        message: "You're already checked in to this event";
    };
    /**
     * Could not find the event to check into
     */
    404: {
        error: 'NotFound';
        message: 'Could not find event';
    };
};

export type GetStaffShiftError = GetStaffShiftErrors[keyof GetStaffShiftErrors];

export type GetStaffShiftResponses = {
    /**
     * The shifts
     */
    200: Shifts;
};

export type GetStaffShiftResponse = GetStaffShiftResponses[keyof GetStaffShiftResponses];

export type PostStaffShiftData = {
    body?: {
        userId: UserId;
        shifts: Array<EventId>;
    };
    path?: never;
    query?: never;
    url: '/staff/shift/';
};

export type PostStaffShiftErrors = {
    /**
     * User already checked in
     */
    400: {
        error: 'AlreadyCheckedIn';
        message: "You're already checked in to this event";
    };
    /**
     * Could not find the event to check into
     */
    404: {
        error: 'NotFound';
        message: 'Could not find event';
    };
};

export type PostStaffShiftError = PostStaffShiftErrors[keyof PostStaffShiftErrors];

export type PostStaffShiftResponses = {
    /**
     * Successfully set
     */
    200: {
        success: true;
    };
};

export type PostStaffShiftResponse = PostStaffShiftResponses[keyof PostStaffShiftResponses];

export type GetStatisticData = {
    body?: never;
    path?: never;
    query?: {
        before?: number | null;
        after?: number | null;
        limit?: StatisticLogFilterLimitSchema;
    };
    url: '/statistic/';
};

export type GetStatisticResponses = {
    /**
     * The logs
     */
    200: StatisticLogs;
};

export type GetStatisticResponse = GetStatisticResponses[keyof GetStatisticResponses];

export type GetUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/';
};

export type GetUserErrors = {
    /**
     * Could not find the user info
     */
    404: {
        error: 'NotFound';
        message: 'Failed to find user';
    };
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
    /**
     * The currently authenticated user's user info
     */
    200: UserInfo;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type PutUserFollowByIdData = {
    body?: never;
    path: {
        id: UserId;
    };
    query?: never;
    url: '/user/follow/{id}/';
};

export type PutUserFollowByIdErrors = {
    /**
     * Could not find the event to follow
     */
    404: {
        error: 'NotFound';
        message: 'Could not find event';
    };
};

export type PutUserFollowByIdError = PutUserFollowByIdErrors[keyof PutUserFollowByIdErrors];

export type PutUserFollowByIdResponses = {
    /**
     * Events followed after successfully following
     */
    200: UserFollowing;
};

export type PutUserFollowByIdResponse = PutUserFollowByIdResponses[keyof PutUserFollowByIdResponses];

export type GetUserFollowingData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/following/';
};

export type GetUserFollowingResponses = {
    /**
     * The followed events
     */
    200: UserFollowing;
};

export type GetUserFollowingResponse = GetUserFollowingResponses[keyof GetUserFollowingResponses];

export type GetUserQrData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/qr/';
};

export type GetUserQrResponses = {
    /**
     * The currently authenticated user's QR code
     */
    200: QrInfo;
};

export type GetUserQrResponse = GetUserQrResponses[keyof GetUserQrResponses];

export type GetUserQrByIdData = {
    body?: never;
    path: {
        id: UserId;
    };
    query?: never;
    url: '/user/qr/{id}/';
};

export type GetUserQrByIdErrors = {
    /**
     * Could not find the user specified
     */
    404: {
        error: 'NotFound';
        message: 'Failed to find user';
    };
};

export type GetUserQrByIdError = GetUserQrByIdErrors[keyof GetUserQrByIdErrors];

export type GetUserQrByIdResponses = {
    /**
     * The specified user's QR code
     */
    200: QrInfo;
};

export type GetUserQrByIdResponse = GetUserQrByIdResponses[keyof GetUserQrByIdResponses];

export type PutUserScanEventData = {
    body?: ScanEventRequest;
    path?: never;
    query?: never;
    url: '/user/scan-event/';
};

export type PutUserScanEventErrors = {
    /**
     * User already checked in
     */
    400: {
        error: 'AlreadyCheckedIn';
        message: "You're already checked in to this event";
    };
    /**
     * Could not find the event to check into
     */
    404: {
        error: 'NotFound';
        message: 'Could not find event';
    };
};

export type PutUserScanEventError = PutUserScanEventErrors[keyof PutUserScanEventErrors];

export type PutUserScanEventResponses = {
    /**
     * Successfully checked in
     */
    200: ScanEvent;
};

export type PutUserScanEventResponse = PutUserScanEventResponses[keyof PutUserScanEventResponses];

export type DeleteUserUnfollowByIdData = {
    body?: never;
    path: {
        id: UserId;
    };
    query?: never;
    url: '/user/unfollow/{id}/';
};

export type DeleteUserUnfollowByIdErrors = {
    /**
     * Could not find the event to unfollow
     */
    404: {
        error: 'NotFound';
        message: 'Could not find event';
    };
};

export type DeleteUserUnfollowByIdError = DeleteUserUnfollowByIdErrors[keyof DeleteUserUnfollowByIdErrors];

export type DeleteUserUnfollowByIdResponses = {
    /**
     * Events followed after successfully unfollowing
     */
    200: UserFollowing;
};

export type DeleteUserUnfollowByIdResponse = DeleteUserUnfollowByIdResponses[keyof DeleteUserUnfollowByIdResponses];

export type GetUserByIdData = {
    body?: never;
    path: {
        id: UserId;
    };
    query?: never;
    url: '/user/{id}/';
};

export type GetUserByIdErrors = {
    /**
     * Could not find the user info
     */
    404: {
        error: 'NotFound';
        message: 'Failed to find user';
    };
};

export type GetUserByIdError = GetUserByIdErrors[keyof GetUserByIdErrors];

export type GetUserByIdResponses = {
    /**
     * The specified's user info
     */
    200: UserInfo;
};

export type GetUserByIdResponse = GetUserByIdResponses[keyof GetUserByIdResponses];

export type GetVersionAndroidData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/version/android/';
};

export type GetVersionAndroidResponses = {
    /**
     * The current version
     */
    200: VersionResponse;
};

export type GetVersionAndroidResponse = GetVersionAndroidResponses[keyof GetVersionAndroidResponses];

export type GetVersionIosData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/version/ios/';
};

export type GetVersionIosResponses = {
    /**
     * The current version
     */
    200: VersionResponse;
};

export type GetVersionIosResponse = GetVersionIosResponses[keyof GetVersionIosResponses];

export type ClientOptions = {
    baseUrl: 'https://adonix.hackillinois.org' | (string & {});
};