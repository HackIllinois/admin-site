// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetAdmissionNotsentData, GetAdmissionNotsentResponse, GetAdmissionRsvpData, GetAdmissionRsvpResponse, GetAdmissionRsvpError, GetAdmissionRsvpStaffData, GetAdmissionRsvpStaffResponse, PutAdmissionRsvpByDecisionData, PutAdmissionRsvpByDecisionResponse, PutAdmissionRsvpByDecisionError, GetAdmissionRsvpByIdData, GetAdmissionRsvpByIdResponse, GetAdmissionRsvpByIdError, PutAdmissionUpdateData, PutAdmissionUpdateResponse, PutAdmissionUpdateError, GetAuthDevData, GetAuthDevResponse, GetAuthLoginByProviderData, GetAuthLoginByProviderError, GetAuthRolesData, GetAuthRolesResponse, GetAuthRolesListByRoleData, GetAuthRolesListByRoleResponse, GetAuthRolesByIdData, GetAuthRolesByIdResponse, GetAuthRolesByIdError, DeleteAuthRolesByIdByRoleData, DeleteAuthRolesByIdByRoleResponse, DeleteAuthRolesByIdByRoleError, PutAuthRolesByIdByRoleData, PutAuthRolesByIdByRoleResponse, PutAuthRolesByIdByRoleError, GetAuthTokenRefreshData, GetAuthTokenRefreshResponse, GetAuthByProviderCallbackData, GetAuthByProviderCallbackError, GetEventData, GetEventResponse, PostEventData, PostEventResponse, PutEventData, PutEventResponse, PutEventError, GetEventFollowersByIdData, GetEventFollowersByIdResponse, GetEventFollowersByIdError, GetEventStaffData, GetEventStaffResponse, GetEventStaffError, DeleteEventByIdData, DeleteEventByIdResponse, DeleteEventByIdError, GetEventByIdData, GetEventByIdResponse, GetEventByIdError, PostMailSendData, PostMailSendResponse, GetMentorData, GetMentorResponse, PostMentorData, PostMentorResponse, PostMentorAttendanceData, PostMentorAttendanceResponse, PostMentorAttendanceError, DeleteMentorByIdData, DeleteMentorByIdResponse, DeleteMentorByIdError, GetNewsletterData, GetNewsletterResponse, DeleteNewsletterSubscribeData, DeleteNewsletterSubscribeResponse, PostNewsletterSubscribeData, PostNewsletterSubscribeResponse, GetNewsletterByIdData, GetNewsletterByIdResponse, GetNewsletterByIdError, GetNotificationData, GetNotificationResponse, PostNotificationData, PostNotificationResponse, PostNotificationSendData, PostNotificationSendResponse, GetProfileData, GetProfileResponse, GetProfileError, PostProfileData, PostProfileResponse, PostProfileError, PutProfileData, PutProfileResponse, PutProfileError, GetProfileLeaderboardData, GetProfileLeaderboardResponse, GetProfileRankingData, GetProfileRankingResponse, GetProfileRankingError, GetProfileByIdData, GetProfileByIdResponse, GetProfileByIdError, PostPuzzleCreateData, PostPuzzleCreateResponse, GetPuzzleStatusData, GetPuzzleStatusResponse, GetPuzzleStatusError, PostPuzzleSubmitByQidData, PostPuzzleSubmitByQidResponse, PostPuzzleSubmitByQidError, GetRegistrationData, GetRegistrationResponse, GetRegistrationError, PostRegistrationData, PostRegistrationResponse, PostRegistrationError, GetRegistrationChallengeData, GetRegistrationChallengeResponse, PostRegistrationChallengeData, PostRegistrationChallengeResponse, PostRegistrationChallengeError, GetRegistrationStatusData, GetRegistrationStatusResponse, PostRegistrationSubmitData, PostRegistrationSubmitResponse, PostRegistrationSubmitError, GetRegistrationUseridByIdData, GetRegistrationUseridByIdResponse, GetRegistrationUseridByIdError, GetS3DownloadData, GetS3DownloadResponse, GetS3DownloadByIdData, GetS3DownloadByIdResponse, GetS3UploadData, GetS3UploadResponse, GetShopData, GetShopResponse, GetShopCartData, GetShopCartResponse, GetShopCartQrData, GetShopCartQrResponse, GetShopCartQrError, PostShopCartRedeemData, PostShopCartRedeemResponse, PostShopCartRedeemError, DeleteShopCartByItemIdData, DeleteShopCartByItemIdResponse, DeleteShopCartByItemIdError, PostShopCartByItemIdData, PostShopCartByItemIdResponse, PostShopCartByItemIdError, PostShopItemData, PostShopItemResponse, PostShopItemError, DeleteShopItemByIdData, DeleteShopItemByIdResponse, DeleteShopItemByIdError, PutShopItemByIdData, PutShopItemByIdResponse, PutShopItemByIdError, PostStaffAttendanceData, PostStaffAttendanceResponse, PostStaffAttendanceError, PutStaffScanAttendeeData, PutStaffScanAttendeeResponse, PutStaffScanAttendeeError, GetStaffShiftData, GetStaffShiftResponse, GetStaffShiftError, PostStaffShiftData, PostStaffShiftResponse, PostStaffShiftError, GetUserData, GetUserResponse, GetUserError, PutUserFollowByIdData, PutUserFollowByIdResponse, PutUserFollowByIdError, GetUserFollowingData, GetUserFollowingResponse, GetUserQrData, GetUserQrResponse, GetUserQrByIdData, GetUserQrByIdResponse, GetUserQrByIdError, PutUserScanEventData, PutUserScanEventResponse, PutUserScanEventError, DeleteUserUnfollowByIdData, DeleteUserUnfollowByIdResponse, DeleteUserUnfollowByIdError, GetUserByIdData, GetUserByIdResponse, GetUserByIdError, GetVersionAndroidData, GetVersionAndroidResponse, GetVersionIosData, GetVersionIosResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class AdmissionService {
    /**
     * Gets all admission decisions that have not had an email sent yet
     * **Required role: STAFF**
     */
    public static getAdmissionNotsent<ThrowOnError extends boolean = false>(options?: Options<GetAdmissionNotsentData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetAdmissionNotsentResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/admission/notsent/',
            ...options
        });
    }
    
    /**
     * Gets admission rsvp information for the current user
     * **Required role: USER**
     */
    public static getAdmissionRsvp<ThrowOnError extends boolean = false>(options?: Options<GetAdmissionRsvpData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetAdmissionRsvpResponse, GetAdmissionRsvpError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/admission/rsvp/',
            ...options
        });
    }
    
    /**
     * Gets admission rsvps for all users
     * **Required role: STAFF**
     */
    public static getAdmissionRsvpStaff<ThrowOnError extends boolean = false>(options?: Options<GetAdmissionRsvpStaffData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetAdmissionRsvpStaffResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/admission/rsvp/staff/',
            ...options
        });
    }
    
    /**
     * RSVP with a accept or decline decision
     * **Required role: USER**
     */
    public static putAdmissionRsvpByDecision<ThrowOnError extends boolean = false>(options: Options<PutAdmissionRsvpByDecisionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutAdmissionRsvpByDecisionResponse, PutAdmissionRsvpByDecisionError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/admission/rsvp/{decision}/',
            ...options
        });
    }
    
    /**
     * Gets admission rsvp information for the specified user
     * **Required role: STAFF**
     */
    public static getAdmissionRsvpById<ThrowOnError extends boolean = false>(options: Options<GetAdmissionRsvpByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetAdmissionRsvpByIdResponse, GetAdmissionRsvpByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/admission/rsvp/{id}/',
            ...options
        });
    }
    
    /**
     * Updates the decision status of specified applicants
     * **Required role: STAFF**
     */
    public static putAdmissionUpdate<ThrowOnError extends boolean = false>(options?: Options<PutAdmissionUpdateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<PutAdmissionUpdateResponse, PutAdmissionUpdateError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/admission/update/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class AuthService {
    /**
     * A strictly dev-only callback which displays the authentication JWT
     * This quite literally only outputs the passed `token` query parameter
     */
    public static getAuthDev<ThrowOnError extends boolean = false>(options: Options<GetAuthDevData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetAuthDevResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/auth/dev/',
            ...options
        });
    }
    
    /**
     * Initiates a login through an authentication provider
     * You should redirect the browser here, and provide the device you are redirecting from. Attendees authenticate through GitHub, and staff authenticate through Google. The device is used to determine the url to redirect back to after authentication is successful. For testing purposes, such as localhost, the redirect url may be provided directly instead. It will not be accepted if it does not match the allowed redirect urls. Note that redirect will override device if both are provided.
     */
    public static getAuthLoginByProvider<ThrowOnError extends boolean = false>(options: Options<GetAuthLoginByProviderData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<unknown, GetAuthLoginByProviderError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/auth/login/{provider}/',
            ...options
        });
    }
    
    /**
     * Gets the roles of the currently authenticated user
     * **Required role: USER**
     *
     * Possible roles: ADMIN, STAFF, MENTOR, APPLICANT, ATTENDEE, USER, SPONSOR, BLOBSTORE, PRO
     */
    public static getAuthRoles<ThrowOnError extends boolean = false>(options?: Options<GetAuthRolesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetAuthRolesResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/auth/roles/',
            ...options
        });
    }
    
    /**
     * Gets all users that have the specified role
     * **Required role: STAFF**
     */
    public static getAuthRolesListByRole<ThrowOnError extends boolean = false>(options: Options<GetAuthRolesListByRoleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetAuthRolesListByRoleResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/auth/roles/list/{role}/',
            ...options
        });
    }
    
    /**
     * Gets the roles of the specified user
     * **Required role: STAFF**
     *
     * Staff-only because this is used to get roles of another user. To get the roles of the currently authenticated user, use `GET /auth/roles/` instead.
     */
    public static getAuthRolesById<ThrowOnError extends boolean = false>(options: Options<GetAuthRolesByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetAuthRolesByIdResponse, GetAuthRolesByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/auth/roles/{id}/',
            ...options
        });
    }
    
    /**
     * Removes a role from a user
     * **Required role: ADMIN**
     */
    public static deleteAuthRolesByIdByRole<ThrowOnError extends boolean = false>(options: Options<DeleteAuthRolesByIdByRoleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteAuthRolesByIdByRoleResponse, DeleteAuthRolesByIdByRoleError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/auth/roles/{id}/{role}/',
            ...options
        });
    }
    
    /**
     * Adds a role to a user
     * **Required role: ADMIN**
     */
    public static putAuthRolesByIdByRole<ThrowOnError extends boolean = false>(options: Options<PutAuthRolesByIdByRoleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutAuthRolesByIdByRoleResponse, PutAuthRolesByIdByRoleError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/auth/roles/{id}/{role}/',
            ...options
        });
    }
    
    /**
     * Gets a new authorization token with a reset expiry
     * **Required role: USER**
     */
    public static getAuthTokenRefresh<ThrowOnError extends boolean = false>(options?: Options<GetAuthTokenRefreshData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetAuthTokenRefreshResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/auth/token/refresh/',
            ...options
        });
    }
    
    /**
     * DO NOT CALL. Authentication providers call this after a successful authentication.
     * **You should not ever use this directly.** Authentication providers use this endpoint to determine where to send the authentication data.
     */
    public static getAuthByProviderCallback<ThrowOnError extends boolean = false>(options: Options<GetAuthByProviderCallbackData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<unknown, GetAuthByProviderCallbackError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/auth/{provider}/callback/',
            ...options
        });
    }
    
}

export class EventService {
    /**
     * Gets all events
     * The events returned are filtered based on what the currently authenticated user can access.
     * For example, if the currently authenticated user is not staff, staff events will not be shown.
     */
    public static getEvent<ThrowOnError extends boolean = false>(options?: Options<GetEventData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetEventResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/event/',
            ...options
        });
    }
    
    /**
     * Create a new event
     * **Required role: ADMIN**
     */
    public static postEvent<ThrowOnError extends boolean = false>(options?: Options<PostEventData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostEventResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/event/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Update a event
     * **Required role: ADMIN**
     */
    public static putEvent<ThrowOnError extends boolean = false>(options?: Options<PutEventData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<PutEventResponse, PutEventError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/event/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Gets all the followers of an event
     * **Required role: STAFF**
     */
    public static getEventFollowersById<ThrowOnError extends boolean = false>(options: Options<GetEventFollowersByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetEventFollowersByIdResponse, GetEventFollowersByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/event/followers/{id}/',
            ...options
        });
    }
    
    /**
     * Gets all staff events
     * **Required role: STAFF**
     */
    public static getEventStaff<ThrowOnError extends boolean = false>(options?: Options<GetEventStaffData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetEventStaffResponse, GetEventStaffError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/event/staff/',
            ...options
        });
    }
    
    /**
     * Delete a event
     * **Required role: ADMIN**
     */
    public static deleteEventById<ThrowOnError extends boolean = false>(options: Options<DeleteEventByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteEventByIdResponse, DeleteEventByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/event/{id}/',
            ...options
        });
    }
    
    /**
     * Gets details of an event
     */
    public static getEventById<ThrowOnError extends boolean = false>(options: Options<GetEventByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetEventByIdResponse, GetEventByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/event/{id}/',
            ...options
        });
    }
    
}

export class MailService {
    /**
     * Sends an email
     * **Required role: ADMIN**
     *
     * **WARNING**: This endpoint is not very well documented, so make sure you know what you're doing before you use it directly.
     */
    public static postMailSend<ThrowOnError extends boolean = false>(options?: Options<PostMailSendData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMailSendResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/mail/send/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class MentorService {
    /**
     * Gets all mentor office hours
     * **Required role: STAFF**
     */
    public static getMentor<ThrowOnError extends boolean = false>(options?: Options<GetMentorData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMentorResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/mentor/',
            ...options
        });
    }
    
    /**
     * Create a mentor's office hours
     * **Required role: STAFF**
     */
    public static postMentor<ThrowOnError extends boolean = false>(options?: Options<PostMentorData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMentorResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/mentor/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Checks into a mentor's office hours
     * **Required role: ATTENDEE**
     */
    public static postMentorAttendance<ThrowOnError extends boolean = false>(options?: Options<PostMentorAttendanceData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMentorAttendanceResponse, PostMentorAttendanceError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/mentor/attendance/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Deletes the specified mentor's office hours
     * **Required role: STAFF**
     */
    public static deleteMentorById<ThrowOnError extends boolean = false>(options: Options<DeleteMentorByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteMentorByIdResponse, DeleteMentorByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/mentor/{id}/',
            ...options
        });
    }
    
}

export class NewsletterService {
    /**
     * Gets all of the newsletter and their subscribers
     * **Required role: ADMIN**
     */
    public static getNewsletter<ThrowOnError extends boolean = false>(options?: Options<GetNewsletterData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetNewsletterResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/newsletter/',
            ...options
        });
    }
    
    /**
     * Unsubscribes the requested email to the requested newsletter
     */
    public static deleteNewsletterSubscribe<ThrowOnError extends boolean = false>(options?: Options<DeleteNewsletterSubscribeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<DeleteNewsletterSubscribeResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/newsletter/subscribe/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Subscribes the requested email to the requested newsletter
     */
    public static postNewsletterSubscribe<ThrowOnError extends boolean = false>(options?: Options<PostNewsletterSubscribeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostNewsletterSubscribeResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/newsletter/subscribe/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Gets a newsletter and it's subscribers
     * **Required role: ADMIN**
     */
    public static getNewsletterById<ThrowOnError extends boolean = false>(options: Options<GetNewsletterByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetNewsletterByIdResponse, GetNewsletterByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/newsletter/{id}/',
            ...options
        });
    }
    
}

export class NotificationService {
    /**
     * Gets all notifications that have been sent
     * **Required role: STAFF**
     */
    public static getNotification<ThrowOnError extends boolean = false>(options?: Options<GetNotificationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetNotificationResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/notification/',
            ...options
        });
    }
    
    /**
     * Registers a device token to be associate with the currently authenticated user
     * **Required role: USER**
     */
    public static postNotification<ThrowOnError extends boolean = false>(options?: Options<PostNotificationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostNotificationResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/notification/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Sends a notification to a specified group of users
     * **Required role: ADMIN**
     *
     * Can filter by:
     * - `eventId`: users following a event
     * - `role`: users that have a role
     * - `staffShift`: staff in a staff shift
     * - `foodWave`: users in a food wave
     * - `userIds`: some set of users
     * Filters are intersecting, so `eventId = 123` and `foodWave = 1` would get users following event 123 AND in food wave 1.
     */
    public static postNotificationSend<ThrowOnError extends boolean = false>(options?: Options<PostNotificationSendData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostNotificationSendResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/notification/send/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class ProfileService {
    /**
     * Gets the currently authenticated user's profile
     * **Required role: ATTENDEE**
     */
    public static getProfile<ThrowOnError extends boolean = false>(options?: Options<GetProfileData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetProfileResponse, GetProfileError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/profile/',
            ...options
        });
    }
    
    /**
     * Creates profile of the currently authenticated user
     * **Required role: ATTENDEE**
     */
    public static postProfile<ThrowOnError extends boolean = false>(options?: Options<PostProfileData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostProfileResponse, PostProfileError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/profile/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Updates profile of the currently authenticated user
     * **Required role: ATTENDEE**
     */
    public static putProfile<ThrowOnError extends boolean = false>(options?: Options<PutProfileData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<PutProfileResponse, PutProfileError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/profile/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Gets the profile leaderboard
     * This endpoint is limited - you must provide a limit in the range `[1, 25]`, inclusive.
     */
    public static getProfileLeaderboard<ThrowOnError extends boolean = false>(options?: Options<GetProfileLeaderboardData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetProfileLeaderboardResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/profile/leaderboard/',
            ...options
        });
    }
    
    /**
     * Gets the ranking of the currently authenticated user
     * **Required role: ATTENDEE**
     */
    public static getProfileRanking<ThrowOnError extends boolean = false>(options?: Options<GetProfileRankingData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetProfileRankingResponse, GetProfileRankingError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/profile/ranking/',
            ...options
        });
    }
    
    /**
     * Gets the specified user's profile
     * **Required role: STAFF**
     */
    public static getProfileById<ThrowOnError extends boolean = false>(options: Options<GetProfileByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetProfileByIdResponse, GetProfileByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/profile/{id}/',
            ...options
        });
    }
    
}

export class PuzzleService {
    /**
     * Create the currently authenticated user's puzzle
     * **Required role: USER**
     */
    public static postPuzzleCreate<ThrowOnError extends boolean = false>(options?: Options<PostPuzzleCreateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostPuzzleCreateResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/puzzle/create/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Gets the status on the currently authenticated user's puzzle
     * **Required role: USER**
     */
    public static getPuzzleStatus<ThrowOnError extends boolean = false>(options?: Options<GetPuzzleStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPuzzleStatusResponse, GetPuzzleStatusError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/puzzle/status/',
            ...options
        });
    }
    
    /**
     * Submits an answer to a specific question
     * **Required role: USER**
     */
    public static postPuzzleSubmitByQid<ThrowOnError extends boolean = false>(options: Options<PostPuzzleSubmitByQidData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostPuzzleSubmitByQidResponse, PostPuzzleSubmitByQidError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/puzzle/submit/{qid}/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class RegistrationService {
    /**
     * Gets the currently authenticated user's registration data
     * **Required role: USER**
     */
    public static getRegistration<ThrowOnError extends boolean = false>(options?: Options<GetRegistrationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRegistrationResponse, GetRegistrationError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/registration/',
            ...options
        });
    }
    
    /**
     * Creates or sets the currently authenticated user's registration data
     * **Required role: USER**
     */
    public static postRegistration<ThrowOnError extends boolean = false>(options?: Options<PostRegistrationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostRegistrationResponse, PostRegistrationError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/registration/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Gets the challenge input for the currently authenticated user
     * **Required role: USER**
     */
    public static getRegistrationChallenge<ThrowOnError extends boolean = false>(options?: Options<GetRegistrationChallengeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRegistrationChallengeResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/registration/challenge/',
            ...options
        });
    }
    
    /**
     * Attempts to solve the challenge
     * **Required role: USER**
     */
    public static postRegistrationChallenge<ThrowOnError extends boolean = false>(options?: Options<PostRegistrationChallengeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostRegistrationChallengeResponse, PostRegistrationChallengeError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/registration/challenge/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Gets the currently authenticated user's registration data
     */
    public static getRegistrationStatus<ThrowOnError extends boolean = false>(options?: Options<GetRegistrationStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRegistrationStatusResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/registration/status/',
            ...options
        });
    }
    
    /**
     * Submits the currently authenticated user's registration - permanent
     * **Required role: USER**
     */
    public static postRegistrationSubmit<ThrowOnError extends boolean = false>(options?: Options<PostRegistrationSubmitData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostRegistrationSubmitResponse, PostRegistrationSubmitError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/registration/submit/',
            ...options
        });
    }
    
    /**
     * Gets the specified user's registration data
     * **Required role: STAFF**
     *
     * Staff-only because this can be used to get any user's registration data.
     * If you need the currently authenticated user's registration data, use `GET /registration/` instead.
     */
    public static getRegistrationUseridById<ThrowOnError extends boolean = false>(options: Options<GetRegistrationUseridByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetRegistrationUseridByIdResponse, GetRegistrationUseridByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/registration/userid/{id}',
            ...options
        });
    }
    
}

export class S3Service {
    /**
     * Gets a download url for the resume of the currently authenticated user
     * **Required role: USER**
     *
     * This is a presigned url from s3 that is valid for 60 seconds
     */
    public static getS3Download<ThrowOnError extends boolean = false>(options?: Options<GetS3DownloadData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetS3DownloadResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/s3/download/',
            ...options
        });
    }
    
    /**
     * Gets a download url for the resume of the specified user
     * **Required role: ADMIN**
     *
     * Admin-only because this is for a specific user, use `GET /s3/download/` for the currently authenticated user
     */
    public static getS3DownloadById<ThrowOnError extends boolean = false>(options: Options<GetS3DownloadByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetS3DownloadByIdResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/s3/download/{id}',
            ...options
        });
    }
    
    /**
     * Gets a upload url for the resume of the currently authenticated user
     * **Required role: USER**
     *
     * This is a presigned url from s3 that is valid for 60 seconds
     */
    public static getS3Upload<ThrowOnError extends boolean = false>(options?: Options<GetS3UploadData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetS3UploadResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/s3/upload/',
            ...options
        });
    }
    
}

export class ShopService {
    /**
     * Gets all the shop items available
     */
    public static getShop<ThrowOnError extends boolean = false>(options?: Options<GetShopData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetShopResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/shop/',
            ...options
        });
    }
    
    /**
     * Returns content of users cart
     * **Required role: USER**
     */
    public static getShopCart<ThrowOnError extends boolean = false>(options?: Options<GetShopCartData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetShopCartResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/shop/cart/',
            ...options
        });
    }
    
    /**
     * Returns qr code of users cart
     * **Required role: USER**
     */
    public static getShopCartQr<ThrowOnError extends boolean = false>(options?: Options<GetShopCartQrData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetShopCartQrResponse, GetShopCartQrError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/shop/cart/qr/',
            ...options
        });
    }
    
    /**
     * Purchases the order scanned
     * **Required role: STAFF**
     *
     * Note: Do not pass the full uri (`hackillinois://user?qr=abcd`) but just the QR token part (`abcd`).
     */
    public static postShopCartRedeem<ThrowOnError extends boolean = false>(options?: Options<PostShopCartRedeemData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostShopCartRedeemResponse, PostShopCartRedeemError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/shop/cart/redeem/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Removes a single instance of an item from the user's cart
     * **Required role: USER**
     */
    public static deleteShopCartByItemId<ThrowOnError extends boolean = false>(options: Options<DeleteShopCartByItemIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteShopCartByItemIdResponse, DeleteShopCartByItemIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/shop/cart/{itemId}/',
            ...options
        });
    }
    
    /**
     * Adds item to users cart
     * **Required role: USER**
     */
    public static postShopCartByItemId<ThrowOnError extends boolean = false>(options: Options<PostShopCartByItemIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostShopCartByItemIdResponse, PostShopCartByItemIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/shop/cart/{itemId}/',
            ...options
        });
    }
    
    /**
     * Creates a shop item
     * **Required role: ADMIN**
     */
    public static postShopItem<ThrowOnError extends boolean = false>(options?: Options<PostShopItemData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostShopItemResponse, PostShopItemError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/shop/item/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Deletes a shop item
     * **Required role: ADMIN**
     */
    public static deleteShopItemById<ThrowOnError extends boolean = false>(options: Options<DeleteShopItemByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteShopItemByIdResponse, DeleteShopItemByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/shop/item/{id}/',
            ...options
        });
    }
    
    /**
     * Updates a shop item
     * **Required role: ADMIN**
     */
    public static putShopItemById<ThrowOnError extends boolean = false>(options: Options<PutShopItemByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutShopItemByIdResponse, PutShopItemByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/shop/item/{id}/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class StaffService {
    /**
     * Checks the currently authenticated staff into the specified staff event
     * **Required role: STAFF**
     */
    public static postStaffAttendance<ThrowOnError extends boolean = false>(options?: Options<PostStaffAttendanceData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostStaffAttendanceResponse, PostStaffAttendanceError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/staff/attendance/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Checks in a user using their encrypted QR code token for a specified event. Note: This is not the full hackillinois:// uri but just the QR token part.
     * **Required role: STAFF**
     */
    public static putStaffScanAttendee<ThrowOnError extends boolean = false>(options?: Options<PutStaffScanAttendeeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<PutStaffScanAttendeeResponse, PutStaffScanAttendeeError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/staff/scan-attendee/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Gets staff shifts for the currently authenticated user
     * **Required role: STAFF**
     */
    public static getStaffShift<ThrowOnError extends boolean = false>(options?: Options<GetStaffShiftData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetStaffShiftResponse, GetStaffShiftError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/staff/shift/',
            ...options
        });
    }
    
    /**
     * Adds shifts for a specified user
     * **Required role: ADMIN**
     */
    public static postStaffShift<ThrowOnError extends boolean = false>(options?: Options<PostStaffShiftData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostStaffShiftResponse, PostStaffShiftError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/staff/shift/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class UserService {
    /**
     * Gets the user info for the currently authenticated user
     * **Required role: USER**
     */
    public static getUser<ThrowOnError extends boolean = false>(options?: Options<GetUserData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserResponse, GetUserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/user/',
            ...options
        });
    }
    
    /**
     * Follows the specified event
     * **Required role: USER**
     */
    public static putUserFollowById<ThrowOnError extends boolean = false>(options: Options<PutUserFollowByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutUserFollowByIdResponse, PutUserFollowByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/user/follow/{id}/',
            ...options
        });
    }
    
    /**
     * Gets the events the currently authenticated user is following
     * **Required role: USER**
     */
    public static getUserFollowing<ThrowOnError extends boolean = false>(options?: Options<GetUserFollowingData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserFollowingResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/user/following/',
            ...options
        });
    }
    
    /**
     * Gets a QR code for the currently authenticated user
     * **Required role: USER**
     *
     * You should fetch this QR code every 15 seconds, as it expires every 20 seconds.
     */
    public static getUserQr<ThrowOnError extends boolean = false>(options?: Options<GetUserQrData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserQrResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/user/qr/',
            ...options
        });
    }
    
    /**
     * Gets a QR code for the specified user
     * **Required role: STAFF**
     *
     * This is staff-only since you can get ANY user's QR code with this endpoint.
     * If you want to get the currently authenticated user's QR code, use `GET /user/qr`.
     */
    public static getUserQrById<ThrowOnError extends boolean = false>(options: Options<GetUserQrByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserQrByIdResponse, GetUserQrByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/user/qr/{id}/',
            ...options
        });
    }
    
    /**
     * Checks in the currently authenticated user and marks their attendance
     * **Required role: USER**
     */
    public static putUserScanEvent<ThrowOnError extends boolean = false>(options?: Options<PutUserScanEventData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<PutUserScanEventResponse, PutUserScanEventError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/user/scan-event/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Unfollows the specified event
     * **Required role: USER**
     */
    public static deleteUserUnfollowById<ThrowOnError extends boolean = false>(options: Options<DeleteUserUnfollowByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteUserUnfollowByIdResponse, DeleteUserUnfollowByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/user/unfollow/{id}/',
            ...options
        });
    }
    
    /**
     * Gets the user info for the specified user
     * **Required role: STAFF**
     *
     * This is staff-only since you can get ANY user's info with this endpoint.
     * To get the currently authenticated user, use `GET /user/`
     */
    public static getUserById<ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserByIdResponse, GetUserByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/user/{id}/',
            ...options
        });
    }
    
}

export class VersionService {
    /**
     * Gets the current android version
     * Note that this version is pulled from the adonix-metadata repo ([https://github.com/hackIllinois/adonix-metadata](https://github.com/hackIllinois/adonix-metadata))
     */
    public static getVersionAndroid<ThrowOnError extends boolean = false>(options?: Options<GetVersionAndroidData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetVersionAndroidResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/version/android/',
            ...options
        });
    }
    
    /**
     * Gets the current ios version
     * Note that this version is pulled from the adonix-metadata repo ([https://github.com/hackIllinois/adonix-metadata](https://github.com/hackIllinois/adonix-metadata))
     */
    public static getVersionIos<ThrowOnError extends boolean = false>(options?: Options<GetVersionIosData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetVersionIosResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/version/ios/',
            ...options
        });
    }
    
}