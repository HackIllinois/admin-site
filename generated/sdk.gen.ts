// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetAdmissionNotsentData, GetAdmissionNotsentResponse, GetAdmissionRsvpData, GetAdmissionRsvpResponse, GetAdmissionRsvpError, GetAdmissionRsvpStaffData, GetAdmissionRsvpStaffResponse, PutAdmissionRsvpByDecisionData, PutAdmissionRsvpByDecisionResponse, PutAdmissionRsvpByDecisionError, GetAdmissionRsvpByIdData, GetAdmissionRsvpByIdResponse, GetAdmissionRsvpByIdError, PutAdmissionUpdateData, PutAdmissionUpdateResponse, PutAdmissionUpdateError, GetAuthLoginByProviderData, GetAuthLoginByProviderResponse, GetAuthLoginByProviderError, PostAuthLogoutData, PostAuthLogoutResponse, GetAuthRolesData, GetAuthRolesResponse, GetAuthRolesListInfoByRoleData, GetAuthRolesListInfoByRoleResponse, GetAuthRolesListByRoleData, GetAuthRolesListByRoleResponse, GetAuthRolesByIdData, GetAuthRolesByIdResponse, GetAuthRolesByIdError, DeleteAuthRolesByIdByRoleData, DeleteAuthRolesByIdByRoleResponse, DeleteAuthRolesByIdByRoleError, PutAuthRolesByIdByRoleData, PutAuthRolesByIdByRoleResponse, PutAuthRolesByIdByRoleError, PostAuthSponsorLoginData, PostAuthSponsorLoginResponse, PostAuthSponsorLoginError, PostAuthSponsorVerifyData, PostAuthSponsorVerifyResponse, GetAuthTokenData, GetAuthTokenResponse, GetAuthTokenError, GetAuthByProviderCallbackData, GetAuthByProviderCallbackError, GetEventData, GetEventResponse, PostEventData, PostEventResponse, PutEventData, PutEventResponse, PutEventError, GetEventAttendeesInfoByIdData, GetEventAttendeesInfoByIdResponse, GetEventAttendeesInfoByIdError, GetEventAttendeesByIdData, GetEventAttendeesByIdResponse, GetEventAttendeesByIdError, GetEventFollowersByIdData, GetEventFollowersByIdResponse, GetEventFollowersByIdError, PostEventMarkExcusedByIdData, PostEventMarkExcusedByIdResponse, PostEventMarkExcusedByIdError, GetEventStaffData, GetEventStaffResponse, GetEventStaffError, DeleteEventByIdData, DeleteEventByIdResponse, DeleteEventByIdError, GetEventByIdData, GetEventByIdResponse, GetEventByIdError, PostMailSendData, PostMailSendResponse, GetMentorData, GetMentorResponse, PostMentorData, PostMentorResponse, PostMentorAttendanceData, PostMentorAttendanceResponse, PostMentorAttendanceError, DeleteMentorByIdData, DeleteMentorByIdResponse, DeleteMentorByIdError, GetNewsletterData, GetNewsletterResponse, DeleteNewsletterSubscribeData, DeleteNewsletterSubscribeResponse, PostNewsletterSubscribeData, PostNewsletterSubscribeResponse, GetNewsletterByIdData, GetNewsletterByIdResponse, GetNewsletterByIdError, GetNotificationData, GetNotificationResponse, PostNotificationData, PostNotificationResponse, PostNotificationSendData, PostNotificationSendResponse, GetProfileData, GetProfileResponse, GetProfileError, PostProfileData, PostProfileResponse, PostProfileError, PutProfileData, PutProfileResponse, PutProfileError, GetProfileLeaderboardData, GetProfileLeaderboardResponse, GetProfileRankingData, GetProfileRankingResponse, GetProfileRankingError, GetProfileByIdData, GetProfileByIdResponse, GetProfileByIdError, PostPuzzleCreateData, PostPuzzleCreateResponse, GetPuzzleStatusData, GetPuzzleStatusResponse, GetPuzzleStatusError, PostPuzzleSubmitByQidData, PostPuzzleSubmitByQidResponse, PostPuzzleSubmitByQidError, GetRegistrationData, GetRegistrationResponse, GetRegistrationError, PostRegistrationData, PostRegistrationResponse, PostRegistrationError, GetRegistrationChallengeData, GetRegistrationChallengeResponse, PostRegistrationChallengeData, PostRegistrationChallengeResponse, PostRegistrationChallengeError, GetRegistrationStatusData, GetRegistrationStatusResponse, PostRegistrationSubmitData, PostRegistrationSubmitResponse, PostRegistrationSubmitError, GetRegistrationUseridByIdData, GetRegistrationUseridByIdResponse, GetRegistrationUseridByIdError, GetResumeDownloadData, GetResumeDownloadResponse, GetResumeDownloadByIdData, GetResumeDownloadByIdResponse, GetResumeUploadData, GetResumeUploadResponse, GetShopData, GetShopResponse, GetShopCartData, GetShopCartResponse, GetShopCartQrData, GetShopCartQrResponse, GetShopCartQrError, PostShopCartRedeemData, PostShopCartRedeemResponse, PostShopCartRedeemError, DeleteShopCartByItemIdData, DeleteShopCartByItemIdResponse, DeleteShopCartByItemIdError, PostShopCartByItemIdData, PostShopCartByItemIdResponse, PostShopCartByItemIdError, PostShopItemData, PostShopItemResponse, PostShopItemError, DeleteShopItemByIdData, DeleteShopItemByIdResponse, DeleteShopItemByIdError, PutShopItemByIdData, PutShopItemByIdResponse, PutShopItemByIdError, GetShopRaffleByIdData, GetShopRaffleByIdResponse, GetShopRaffleByIdError, DeleteSponsorData, DeleteSponsorResponse, DeleteSponsorError, GetSponsorData, GetSponsorResponse, PostSponsorData, PostSponsorResponse, PostSponsorResumebookPagecountData, PostSponsorResumebookPagecountResponse, PostSponsorResumebookByPageData, PostSponsorResumebookByPageResponse, PostStaffAttendanceData, PostStaffAttendanceResponse, PostStaffAttendanceError, PutStaffScanAttendeeData, PutStaffScanAttendeeResponse, PutStaffScanAttendeeError, GetStaffShiftData, GetStaffShiftResponse, GetStaffShiftError, PostStaffShiftData, PostStaffShiftResponse, PostStaffShiftError, GetStatisticData, GetStatisticResponse, GetStatisticLoggingData, GetStatisticLoggingResponse, PostStatisticLoggingByStatusData, PostStatisticLoggingByStatusResponse, GetUserData, GetUserResponse, GetUserError, PutUserFollowByIdData, PutUserFollowByIdResponse, PutUserFollowByIdError, GetUserFollowingData, GetUserFollowingResponse, GetUserQrData, GetUserQrResponse, GetUserQrByIdData, GetUserQrByIdResponse, GetUserQrByIdError, PutUserScanEventData, PutUserScanEventResponse, PutUserScanEventError, DeleteUserUnfollowByIdData, DeleteUserUnfollowByIdResponse, DeleteUserUnfollowByIdError, GetUserByIdData, GetUserByIdResponse, GetUserByIdError, GetVersionAndroidData, GetVersionAndroidResponse, PostVersionAndroidByVersionData, PostVersionAndroidByVersionResponse, GetVersionIosData, GetVersionIosResponse, PostVersionIosByVersionData, PostVersionIosByVersionResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class AdmissionService {
    /**
     * Gets all admission decisions that have not had an email sent yet
     * **Required role: STAFF**
     */
    public static getAdmissionNotsent<ThrowOnError extends boolean = false>(options?: Options<GetAdmissionNotsentData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetAdmissionNotsentResponse, unknown, ThrowOnError>({
            url: '/admission/notsent/',
            ...options
        });
    }
    
    /**
     * Gets admission rsvp information for the current user
     * **Required role: USER**
     */
    public static getAdmissionRsvp<ThrowOnError extends boolean = false>(options?: Options<GetAdmissionRsvpData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetAdmissionRsvpResponse, GetAdmissionRsvpError, ThrowOnError>({
            url: '/admission/rsvp/',
            ...options
        });
    }
    
    /**
     * Gets admission rsvps for all users
     * **Required role: STAFF**
     */
    public static getAdmissionRsvpStaff<ThrowOnError extends boolean = false>(options?: Options<GetAdmissionRsvpStaffData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetAdmissionRsvpStaffResponse, unknown, ThrowOnError>({
            url: '/admission/rsvp/staff/',
            ...options
        });
    }
    
    /**
     * RSVP with a accept or decline decision
     * **Required role: USER**
     */
    public static putAdmissionRsvpByDecision<ThrowOnError extends boolean = false>(options: Options<PutAdmissionRsvpByDecisionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutAdmissionRsvpByDecisionResponse, PutAdmissionRsvpByDecisionError, ThrowOnError>({
            url: '/admission/rsvp/{decision}/',
            ...options
        });
    }
    
    /**
     * Gets admission rsvp information for the specified user
     * **Required role: STAFF**
     */
    public static getAdmissionRsvpById<ThrowOnError extends boolean = false>(options: Options<GetAdmissionRsvpByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetAdmissionRsvpByIdResponse, GetAdmissionRsvpByIdError, ThrowOnError>({
            url: '/admission/rsvp/{id}/',
            ...options
        });
    }
    
    /**
     * Updates the decision status of specified applicants
     * **Required role: STAFF**
     */
    public static putAdmissionUpdate<ThrowOnError extends boolean = false>(options?: Options<PutAdmissionUpdateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<PutAdmissionUpdateResponse, PutAdmissionUpdateError, ThrowOnError>({
            url: '/admission/update/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class AuthService {
    /**
     * Initiates a login through an authentication provider
     * **Required role: null**
     *
     * You should redirect the browser here to initate the login process. Attendees authenticate through GitHub, and staff authenticate through Google. The redirect parameter must be a URL with a valid origin. Mobile URLs will receive JWT as a URL parameter. Web URLs will receive JWT as an HTTP-only cookie. After successful authentication, the user will be redirected to the provided URL.
     */
    public static getAuthLoginByProvider<ThrowOnError extends boolean = false>(options: Options<GetAuthLoginByProviderData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetAuthLoginByProviderResponse, GetAuthLoginByProviderError, ThrowOnError>({
            url: '/auth/login/{provider}/',
            ...options
        });
    }
    
    /**
     * Logs out the currently authenticated user
     * **Required role: null**
     *
     * Clears the JWT authentication cookie, effectively logging out the user.
     */
    public static postAuthLogout<ThrowOnError extends boolean = false>(options?: Options<PostAuthLogoutData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostAuthLogoutResponse, unknown, ThrowOnError>({
            url: '/auth/logout/',
            ...options
        });
    }
    
    /**
     * Gets the roles of the currently authenticated user
     * **Required role: USER**
     *
     * Possible roles: ADMIN, STAFF, MENTOR, APPLICANT, ATTENDEE, USER, SPONSOR, BLOBSTORE, PRO
     */
    public static getAuthRoles<ThrowOnError extends boolean = false>(options?: Options<GetAuthRolesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetAuthRolesResponse, unknown, ThrowOnError>({
            url: '/auth/roles/',
            ...options
        });
    }
    
    /**
     * Lists user info for all users that have the specified role
     * **Required role: STAFF**
     */
    public static getAuthRolesListInfoByRole<ThrowOnError extends boolean = false>(options: Options<GetAuthRolesListInfoByRoleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetAuthRolesListInfoByRoleResponse, unknown, ThrowOnError>({
            url: '/auth/roles/list-info/{role}/',
            ...options
        });
    }
    
    /**
     * Gets all users that have the specified role
     * **Required role: STAFF**
     */
    public static getAuthRolesListByRole<ThrowOnError extends boolean = false>(options: Options<GetAuthRolesListByRoleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetAuthRolesListByRoleResponse, unknown, ThrowOnError>({
            url: '/auth/roles/list/{role}/',
            ...options
        });
    }
    
    /**
     * Gets the roles of the specified user
     * **Required role: STAFF**
     *
     * Staff-only because this is used to get roles of another user. To get the roles of the currently authenticated user, use `GET /auth/roles/` instead.
     */
    public static getAuthRolesById<ThrowOnError extends boolean = false>(options: Options<GetAuthRolesByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetAuthRolesByIdResponse, GetAuthRolesByIdError, ThrowOnError>({
            url: '/auth/roles/{id}/',
            ...options
        });
    }
    
    /**
     * Removes a role from a user
     * **Required role: ADMIN**
     */
    public static deleteAuthRolesByIdByRole<ThrowOnError extends boolean = false>(options: Options<DeleteAuthRolesByIdByRoleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteAuthRolesByIdByRoleResponse, DeleteAuthRolesByIdByRoleError, ThrowOnError>({
            url: '/auth/roles/{id}/{role}/',
            ...options
        });
    }
    
    /**
     * Adds a role to a user
     * **Required role: ADMIN**
     */
    public static putAuthRolesByIdByRole<ThrowOnError extends boolean = false>(options: Options<PutAuthRolesByIdByRoleData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutAuthRolesByIdByRoleResponse, PutAuthRolesByIdByRoleError, ThrowOnError>({
            url: '/auth/roles/{id}/{role}/',
            ...options
        });
    }
    
    /**
     * Logs in with a code
     * **Required role: null**
     */
    public static postAuthSponsorLogin<ThrowOnError extends boolean = false>(options?: Options<PostAuthSponsorLoginData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostAuthSponsorLoginResponse, PostAuthSponsorLoginError, ThrowOnError>({
            url: '/auth/sponsor/login/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Sends a code to a sponsor email
     * **Required role: null**
     *
     * For security reasons, there is no confirmation on if an email was actually sent or not
     */
    public static postAuthSponsorVerify<ThrowOnError extends boolean = false>(options: Options<PostAuthSponsorVerifyData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostAuthSponsorVerifyResponse, unknown, ThrowOnError>({
            url: '/auth/sponsor/verify/',
            ...options
        });
    }
    
    /**
     * Extract JWT from authentication cookie
     * **Required role: USER**
     *
     * Allows mobile apps to extract their JWT from the HTTP-only cookie
     */
    public static getAuthToken<ThrowOnError extends boolean = false>(options?: Options<GetAuthTokenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetAuthTokenResponse, GetAuthTokenError, ThrowOnError>({
            url: '/auth/token/',
            ...options
        });
    }
    
    /**
     * DO NOT CALL. Authentication providers call this after a successful authentication.
     * **Required role: null**
     *
     * **You should not ever use this directly.** Authentication providers use this endpoint to determine where to send the authentication data. Sets JWT as HTTP-only cookie (web) or URL parameter (mobile).
     */
    public static getAuthByProviderCallback<ThrowOnError extends boolean = false>(options: Options<GetAuthByProviderCallbackData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<unknown, GetAuthByProviderCallbackError, ThrowOnError>({
            url: '/auth/{provider}/callback/',
            ...options
        });
    }
    
}

export class EventService {
    /**
     * Gets all events
     * **Required role: null**
     *
     * The events returned are filtered based on what the currently authenticated user can access.
     * For example, if the currently authenticated user is not staff, staff events will not be shown.
     */
    public static getEvent<ThrowOnError extends boolean = false>(options?: Options<GetEventData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetEventResponse, unknown, ThrowOnError>({
            url: '/event/',
            ...options
        });
    }
    
    /**
     * Create a new event
     * **Required role: ADMIN**
     */
    public static postEvent<ThrowOnError extends boolean = false>(options?: Options<PostEventData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostEventResponse, unknown, ThrowOnError>({
            url: '/event/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Update a event
     * **Required role: ADMIN**
     */
    public static putEvent<ThrowOnError extends boolean = false>(options?: Options<PutEventData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<PutEventResponse, PutEventError, ThrowOnError>({
            url: '/event/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Gets all the attendee information from an event
     * **Required role: STAFF**
     */
    public static getEventAttendeesInfoById<ThrowOnError extends boolean = false>(options: Options<GetEventAttendeesInfoByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetEventAttendeesInfoByIdResponse, GetEventAttendeesInfoByIdError, ThrowOnError>({
            url: '/event/attendees-info/{id}/',
            ...options
        });
    }
    
    /**
     * Gets all the attendees of an event
     * **Required role: STAFF**
     */
    public static getEventAttendeesById<ThrowOnError extends boolean = false>(options: Options<GetEventAttendeesByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetEventAttendeesByIdResponse, GetEventAttendeesByIdError, ThrowOnError>({
            url: '/event/attendees/{id}/',
            ...options
        });
    }
    
    /**
     * Gets all the followers of an event
     * **Required role: STAFF**
     */
    public static getEventFollowersById<ThrowOnError extends boolean = false>(options: Options<GetEventFollowersByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetEventFollowersByIdResponse, GetEventFollowersByIdError, ThrowOnError>({
            url: '/event/followers/{id}/',
            ...options
        });
    }
    
    /**
     * Mark a user as excused for an event
     * **Required role: STAFF**
     */
    public static postEventMarkExcusedById<ThrowOnError extends boolean = false>(options: Options<PostEventMarkExcusedByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostEventMarkExcusedByIdResponse, PostEventMarkExcusedByIdError, ThrowOnError>({
            url: '/event/mark-excused/{id}/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Gets all staff events
     * **Required role: STAFF**
     */
    public static getEventStaff<ThrowOnError extends boolean = false>(options?: Options<GetEventStaffData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetEventStaffResponse, GetEventStaffError, ThrowOnError>({
            url: '/event/staff/',
            ...options
        });
    }
    
    /**
     * Delete a event
     * **Required role: ADMIN**
     */
    public static deleteEventById<ThrowOnError extends boolean = false>(options: Options<DeleteEventByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteEventByIdResponse, DeleteEventByIdError, ThrowOnError>({
            url: '/event/{id}/',
            ...options
        });
    }
    
    /**
     * Gets details of an event
     * **Required role: null**
     */
    public static getEventById<ThrowOnError extends boolean = false>(options: Options<GetEventByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetEventByIdResponse, GetEventByIdError, ThrowOnError>({
            url: '/event/{id}/',
            ...options
        });
    }
    
}

export class MailService {
    /**
     * Sends an email
     * **Required role: ADMIN**
     *
     * **WARNING**: This endpoint is not very well documented, so make sure you know what you're doing before you use it directly.
     */
    public static postMailSend<ThrowOnError extends boolean = false>(options?: Options<PostMailSendData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMailSendResponse, unknown, ThrowOnError>({
            url: '/mail/send/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class MentorService {
    /**
     * Gets all mentor office hours
     * **Required role: STAFF**
     */
    public static getMentor<ThrowOnError extends boolean = false>(options?: Options<GetMentorData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMentorResponse, unknown, ThrowOnError>({
            url: '/mentor/',
            ...options
        });
    }
    
    /**
     * Create a mentor's office hours
     * **Required role: STAFF**
     */
    public static postMentor<ThrowOnError extends boolean = false>(options?: Options<PostMentorData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMentorResponse, unknown, ThrowOnError>({
            url: '/mentor/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Checks into a mentor's office hours
     * **Required role: ATTENDEE**
     */
    public static postMentorAttendance<ThrowOnError extends boolean = false>(options?: Options<PostMentorAttendanceData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMentorAttendanceResponse, PostMentorAttendanceError, ThrowOnError>({
            url: '/mentor/attendance/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Deletes the specified mentor's office hours
     * **Required role: STAFF**
     */
    public static deleteMentorById<ThrowOnError extends boolean = false>(options: Options<DeleteMentorByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteMentorByIdResponse, DeleteMentorByIdError, ThrowOnError>({
            url: '/mentor/{id}/',
            ...options
        });
    }
    
}

export class NewsletterService {
    /**
     * Gets all of the newsletter and their subscribers
     * **Required role: ADMIN**
     */
    public static getNewsletter<ThrowOnError extends boolean = false>(options?: Options<GetNewsletterData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetNewsletterResponse, unknown, ThrowOnError>({
            url: '/newsletter/',
            ...options
        });
    }
    
    /**
     * Unsubscribes the requested email to the requested newsletter
     * **Required role: null**
     */
    public static deleteNewsletterSubscribe<ThrowOnError extends boolean = false>(options?: Options<DeleteNewsletterSubscribeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<DeleteNewsletterSubscribeResponse, unknown, ThrowOnError>({
            url: '/newsletter/subscribe/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Subscribes the requested email to the requested newsletter
     * **Required role: null**
     */
    public static postNewsletterSubscribe<ThrowOnError extends boolean = false>(options?: Options<PostNewsletterSubscribeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostNewsletterSubscribeResponse, unknown, ThrowOnError>({
            url: '/newsletter/subscribe/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Gets a newsletter and it's subscribers
     * **Required role: ADMIN**
     */
    public static getNewsletterById<ThrowOnError extends boolean = false>(options: Options<GetNewsletterByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetNewsletterByIdResponse, GetNewsletterByIdError, ThrowOnError>({
            url: '/newsletter/{id}/',
            ...options
        });
    }
    
}

export class NotificationService {
    /**
     * Gets all notifications that have been sent
     * **Required role: STAFF**
     */
    public static getNotification<ThrowOnError extends boolean = false>(options?: Options<GetNotificationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetNotificationResponse, unknown, ThrowOnError>({
            url: '/notification/',
            ...options
        });
    }
    
    /**
     * Registers a device token to be associate with the currently authenticated user
     * **Required role: USER**
     */
    public static postNotification<ThrowOnError extends boolean = false>(options?: Options<PostNotificationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostNotificationResponse, unknown, ThrowOnError>({
            url: '/notification/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Sends a notification to a specified group of users
     * **Required role: ADMIN**
     *
     * Can filter by:
     * - `eventId`: users following a event
     * - `role`: users that have a role
     * - `staffShift`: staff in a staff shift
     * - `foodWave`: users in a food wave
     * - `userIds`: some set of users
     * Filters are intersecting, so `eventId = 123` and `foodWave = 1` would get users following event 123 AND in food wave 1.
     */
    public static postNotificationSend<ThrowOnError extends boolean = false>(options?: Options<PostNotificationSendData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostNotificationSendResponse, unknown, ThrowOnError>({
            url: '/notification/send/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class ProfileService {
    /**
     * Gets the currently authenticated user's profile
     * **Required role: ATTENDEE**
     */
    public static getProfile<ThrowOnError extends boolean = false>(options?: Options<GetProfileData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetProfileResponse, GetProfileError, ThrowOnError>({
            url: '/profile/',
            ...options
        });
    }
    
    /**
     * Creates profile of the currently authenticated user
     * **Required role: ATTENDEE**
     */
    public static postProfile<ThrowOnError extends boolean = false>(options?: Options<PostProfileData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostProfileResponse, PostProfileError, ThrowOnError>({
            url: '/profile/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Updates profile of the currently authenticated user
     * **Required role: ATTENDEE**
     */
    public static putProfile<ThrowOnError extends boolean = false>(options?: Options<PutProfileData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<PutProfileResponse, PutProfileError, ThrowOnError>({
            url: '/profile/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Gets the profile leaderboard
     * **Required role: null**
     *
     * This endpoint is limited - you must provide a limit in the range `[1, 25]`, inclusive.
     */
    public static getProfileLeaderboard<ThrowOnError extends boolean = false>(options?: Options<GetProfileLeaderboardData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetProfileLeaderboardResponse, unknown, ThrowOnError>({
            url: '/profile/leaderboard/',
            ...options
        });
    }
    
    /**
     * Gets the ranking of the currently authenticated user
     * **Required role: ATTENDEE**
     */
    public static getProfileRanking<ThrowOnError extends boolean = false>(options?: Options<GetProfileRankingData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetProfileRankingResponse, GetProfileRankingError, ThrowOnError>({
            url: '/profile/ranking/',
            ...options
        });
    }
    
    /**
     * Gets the specified user's profile
     * **Required role: STAFF**
     */
    public static getProfileById<ThrowOnError extends boolean = false>(options: Options<GetProfileByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetProfileByIdResponse, GetProfileByIdError, ThrowOnError>({
            url: '/profile/{id}/',
            ...options
        });
    }
    
}

export class PuzzleService {
    /**
     * Create the currently authenticated user's puzzle
     * **Required role: USER**
     */
    public static postPuzzleCreate<ThrowOnError extends boolean = false>(options?: Options<PostPuzzleCreateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostPuzzleCreateResponse, unknown, ThrowOnError>({
            url: '/puzzle/create/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Gets the status on the currently authenticated user's puzzle
     * **Required role: USER**
     */
    public static getPuzzleStatus<ThrowOnError extends boolean = false>(options?: Options<GetPuzzleStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPuzzleStatusResponse, GetPuzzleStatusError, ThrowOnError>({
            url: '/puzzle/status/',
            ...options
        });
    }
    
    /**
     * Submits an answer to a specific question
     * **Required role: USER**
     */
    public static postPuzzleSubmitByQid<ThrowOnError extends boolean = false>(options: Options<PostPuzzleSubmitByQidData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostPuzzleSubmitByQidResponse, PostPuzzleSubmitByQidError, ThrowOnError>({
            url: '/puzzle/submit/{qid}/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class RegistrationService {
    /**
     * Gets the currently authenticated user's registration data
     * **Required role: USER**
     */
    public static getRegistration<ThrowOnError extends boolean = false>(options?: Options<GetRegistrationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRegistrationResponse, GetRegistrationError, ThrowOnError>({
            url: '/registration/',
            ...options
        });
    }
    
    /**
     * Creates or sets the currently authenticated user's registration data
     * **Required role: USER**
     */
    public static postRegistration<ThrowOnError extends boolean = false>(options?: Options<PostRegistrationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostRegistrationResponse, PostRegistrationError, ThrowOnError>({
            url: '/registration/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Gets the challenge input for the currently authenticated user
     * **Required role: USER**
     */
    public static getRegistrationChallenge<ThrowOnError extends boolean = false>(options?: Options<GetRegistrationChallengeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRegistrationChallengeResponse, unknown, ThrowOnError>({
            url: '/registration/challenge/',
            ...options
        });
    }
    
    /**
     * Attempts to solve the challenge
     * **Required role: USER**
     */
    public static postRegistrationChallenge<ThrowOnError extends boolean = false>(options?: Options<PostRegistrationChallengeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostRegistrationChallengeResponse, PostRegistrationChallengeError, ThrowOnError>({
            url: '/registration/challenge/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Gets the currently authenticated user's registration data
     * **Required role: null**
     */
    public static getRegistrationStatus<ThrowOnError extends boolean = false>(options?: Options<GetRegistrationStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRegistrationStatusResponse, unknown, ThrowOnError>({
            url: '/registration/status/',
            ...options
        });
    }
    
    /**
     * Submits the currently authenticated user's registration - permanent
     * **Required role: USER**
     */
    public static postRegistrationSubmit<ThrowOnError extends boolean = false>(options?: Options<PostRegistrationSubmitData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostRegistrationSubmitResponse, PostRegistrationSubmitError, ThrowOnError>({
            url: '/registration/submit/',
            ...options
        });
    }
    
    /**
     * Gets the specified user's registration data
     * **Required role: STAFF**
     *
     * Staff-only because this can be used to get any user's registration data.
     * If you need the currently authenticated user's registration data, use `GET /registration/` instead.
     */
    public static getRegistrationUseridById<ThrowOnError extends boolean = false>(options: Options<GetRegistrationUseridByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetRegistrationUseridByIdResponse, GetRegistrationUseridByIdError, ThrowOnError>({
            url: '/registration/userid/{id}',
            ...options
        });
    }
    
}

export class ResumeService {
    /**
     * Gets a download url for the resume of the currently authenticated user
     * **Required role: USER**
     *
     * This is a presigned url from s3 that is valid for 60 seconds
     */
    public static getResumeDownload<ThrowOnError extends boolean = false>(options?: Options<GetResumeDownloadData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetResumeDownloadResponse, unknown, ThrowOnError>({
            url: '/resume/download/',
            ...options
        });
    }
    
    /**
     * Gets a download url for the resume of the specified user
     * **Requires one role of: SPONSOR, ADMIN**
     *
     * This is for a specific user and requires higher permissions, use `GET /resume/download/` for the currently authenticated user
     */
    public static getResumeDownloadById<ThrowOnError extends boolean = false>(options: Options<GetResumeDownloadByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetResumeDownloadByIdResponse, unknown, ThrowOnError>({
            url: '/resume/download/{id}',
            ...options
        });
    }
    
    /**
     * Gets a upload url for the resume of the currently authenticated user
     * **Required role: USER**
     *
     * This is a presigned url from s3 that is valid for 60 seconds
     */
    public static getResumeUpload<ThrowOnError extends boolean = false>(options?: Options<GetResumeUploadData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetResumeUploadResponse, unknown, ThrowOnError>({
            url: '/resume/upload/',
            ...options
        });
    }
    
}

export class ShopService {
    /**
     * Gets all the shop items available
     * **Required role: null**
     */
    public static getShop<ThrowOnError extends boolean = false>(options?: Options<GetShopData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetShopResponse, unknown, ThrowOnError>({
            url: '/shop/',
            ...options
        });
    }
    
    /**
     * Returns content of users cart
     * **Required role: USER**
     */
    public static getShopCart<ThrowOnError extends boolean = false>(options?: Options<GetShopCartData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetShopCartResponse, unknown, ThrowOnError>({
            url: '/shop/cart/',
            ...options
        });
    }
    
    /**
     * Returns qr code of users cart
     * **Required role: USER**
     */
    public static getShopCartQr<ThrowOnError extends boolean = false>(options?: Options<GetShopCartQrData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetShopCartQrResponse, GetShopCartQrError, ThrowOnError>({
            url: '/shop/cart/qr/',
            ...options
        });
    }
    
    /**
     * Purchases the order scanned
     * **Required role: STAFF**
     *
     * Note: Do not pass the full uri (`hackillinois://user?qr=abcd`) but just the QR token part (`abcd`).
     */
    public static postShopCartRedeem<ThrowOnError extends boolean = false>(options?: Options<PostShopCartRedeemData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostShopCartRedeemResponse, PostShopCartRedeemError, ThrowOnError>({
            url: '/shop/cart/redeem/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Removes a single instance of an item from the user's cart
     * **Required role: USER**
     */
    public static deleteShopCartByItemId<ThrowOnError extends boolean = false>(options: Options<DeleteShopCartByItemIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteShopCartByItemIdResponse, DeleteShopCartByItemIdError, ThrowOnError>({
            url: '/shop/cart/{itemId}/',
            ...options
        });
    }
    
    /**
     * Adds item to users cart
     * **Required role: USER**
     */
    public static postShopCartByItemId<ThrowOnError extends boolean = false>(options: Options<PostShopCartByItemIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostShopCartByItemIdResponse, PostShopCartByItemIdError, ThrowOnError>({
            url: '/shop/cart/{itemId}/',
            ...options
        });
    }
    
    /**
     * Creates a shop item
     * **Required role: ADMIN**
     */
    public static postShopItem<ThrowOnError extends boolean = false>(options?: Options<PostShopItemData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostShopItemResponse, PostShopItemError, ThrowOnError>({
            url: '/shop/item/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Deletes a shop item
     * **Required role: ADMIN**
     */
    public static deleteShopItemById<ThrowOnError extends boolean = false>(options: Options<DeleteShopItemByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteShopItemByIdResponse, DeleteShopItemByIdError, ThrowOnError>({
            url: '/shop/item/{id}/',
            ...options
        });
    }
    
    /**
     * Updates a shop item
     * **Required role: ADMIN**
     */
    public static putShopItemById<ThrowOnError extends boolean = false>(options: Options<PutShopItemByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutShopItemByIdResponse, PutShopItemByIdError, ThrowOnError>({
            url: '/shop/item/{id}/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Raffles a shop item
     * **Required role: ADMIN**
     */
    public static getShopRaffleById<ThrowOnError extends boolean = false>(options: Options<GetShopRaffleByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetShopRaffleByIdResponse, GetShopRaffleByIdError, ThrowOnError>({
            url: '/shop/raffle/{id}/',
            ...options
        });
    }
    
}

export class SponsorService {
    /**
     * Deletes a sponsor
     * **Required role: ADMIN**
     */
    public static deleteSponsor<ThrowOnError extends boolean = false>(options?: Options<DeleteSponsorData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<DeleteSponsorResponse, DeleteSponsorError, ThrowOnError>({
            url: '/sponsor/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Gets all sponsors
     * **Required role: ADMIN**
     */
    public static getSponsor<ThrowOnError extends boolean = false>(options?: Options<GetSponsorData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetSponsorResponse, unknown, ThrowOnError>({
            url: '/sponsor/',
            ...options
        });
    }
    
    /**
     * Creates a sponsor
     * **Required role: ADMIN**
     */
    public static postSponsor<ThrowOnError extends boolean = false>(options?: Options<PostSponsorData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostSponsorResponse, unknown, ThrowOnError>({
            url: '/sponsor/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Counts admitted applicants matching filter criteria and returns page count
     * **Requires one role of: SPONSOR, ADMIN**
     */
    public static postSponsorResumebookPagecount<ThrowOnError extends boolean = false>(options?: Options<PostSponsorResumebookPagecountData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostSponsorResumebookPagecountResponse, unknown, ThrowOnError>({
            url: '/sponsor/resumebook/pagecount',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Returns a page of admitted applicants matching filter criteria
     * **Requires one role of: SPONSOR, ADMIN**
     */
    public static postSponsorResumebookByPage<ThrowOnError extends boolean = false>(options: Options<PostSponsorResumebookByPageData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostSponsorResumebookByPageResponse, unknown, ThrowOnError>({
            url: '/sponsor/resumebook/{page}/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class StaffService {
    /**
     * Checks the currently authenticated staff into the specified staff event
     * **Required role: STAFF**
     */
    public static postStaffAttendance<ThrowOnError extends boolean = false>(options?: Options<PostStaffAttendanceData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostStaffAttendanceResponse, PostStaffAttendanceError, ThrowOnError>({
            url: '/staff/attendance/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Checks in a user using their encrypted QR code token for a specified event. Note: This is not the full hackillinois:// uri but just the QR token part.
     * **Required role: STAFF**
     */
    public static putStaffScanAttendee<ThrowOnError extends boolean = false>(options?: Options<PutStaffScanAttendeeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<PutStaffScanAttendeeResponse, PutStaffScanAttendeeError, ThrowOnError>({
            url: '/staff/scan-attendee/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Gets staff shifts for the currently authenticated user
     * **Required role: STAFF**
     */
    public static getStaffShift<ThrowOnError extends boolean = false>(options?: Options<GetStaffShiftData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetStaffShiftResponse, GetStaffShiftError, ThrowOnError>({
            url: '/staff/shift/',
            ...options
        });
    }
    
    /**
     * Sets the shifts for a specified user
     * **Required role: ADMIN**
     */
    public static postStaffShift<ThrowOnError extends boolean = false>(options?: Options<PostStaffShiftData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostStaffShiftResponse, PostStaffShiftError, ThrowOnError>({
            url: '/staff/shift/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class StatisticService {
    /**
     * Gets statistics for a specific time range
     * **Required role: STAFF**
     */
    public static getStatistic<ThrowOnError extends boolean = false>(options?: Options<GetStatisticData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetStatisticResponse, unknown, ThrowOnError>({
            url: '/statistic/',
            ...options
        });
    }
    
    /**
     * Gets if logging is currently enabled
     * **Required role: STAFF**
     */
    public static getStatisticLogging<ThrowOnError extends boolean = false>(options?: Options<GetStatisticLoggingData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetStatisticLoggingResponse, unknown, ThrowOnError>({
            url: '/statistic/logging/',
            ...options
        });
    }
    
    /**
     * Enables or disables logging
     * **Required role: ADMIN**
     */
    public static postStatisticLoggingByStatus<ThrowOnError extends boolean = false>(options: Options<PostStatisticLoggingByStatusData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostStatisticLoggingByStatusResponse, unknown, ThrowOnError>({
            url: '/statistic/logging/{status}/',
            ...options
        });
    }
    
}

export class UserService {
    /**
     * Gets the user info for the currently authenticated user
     * **Required role: USER**
     */
    public static getUser<ThrowOnError extends boolean = false>(options?: Options<GetUserData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserResponse, GetUserError, ThrowOnError>({
            url: '/user/',
            ...options
        });
    }
    
    /**
     * Follows the specified event
     * **Required role: USER**
     */
    public static putUserFollowById<ThrowOnError extends boolean = false>(options: Options<PutUserFollowByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutUserFollowByIdResponse, PutUserFollowByIdError, ThrowOnError>({
            url: '/user/follow/{id}/',
            ...options
        });
    }
    
    /**
     * Gets the events the currently authenticated user is following
     * **Required role: USER**
     */
    public static getUserFollowing<ThrowOnError extends boolean = false>(options?: Options<GetUserFollowingData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserFollowingResponse, unknown, ThrowOnError>({
            url: '/user/following/',
            ...options
        });
    }
    
    /**
     * Gets a QR code for the currently authenticated user
     * **Required role: USER**
     *
     * You should fetch this QR code every 15 seconds, as it expires every 20 seconds.
     */
    public static getUserQr<ThrowOnError extends boolean = false>(options?: Options<GetUserQrData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserQrResponse, unknown, ThrowOnError>({
            url: '/user/qr/',
            ...options
        });
    }
    
    /**
     * Gets a QR code for the specified user
     * **Required role: STAFF**
     *
     * This is staff-only since you can get ANY user's QR code with this endpoint.
     * If you want to get the currently authenticated user's QR code, use `GET /user/qr`.
     */
    public static getUserQrById<ThrowOnError extends boolean = false>(options: Options<GetUserQrByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserQrByIdResponse, GetUserQrByIdError, ThrowOnError>({
            url: '/user/qr/{id}/',
            ...options
        });
    }
    
    /**
     * Checks in the currently authenticated user and marks their attendance
     * **Required role: USER**
     */
    public static putUserScanEvent<ThrowOnError extends boolean = false>(options?: Options<PutUserScanEventData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<PutUserScanEventResponse, PutUserScanEventError, ThrowOnError>({
            url: '/user/scan-event/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Unfollows the specified event
     * **Required role: USER**
     */
    public static deleteUserUnfollowById<ThrowOnError extends boolean = false>(options: Options<DeleteUserUnfollowByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteUserUnfollowByIdResponse, DeleteUserUnfollowByIdError, ThrowOnError>({
            url: '/user/unfollow/{id}/',
            ...options
        });
    }
    
    /**
     * Gets the user info for the specified user
     * **Required role: STAFF**
     *
     * This is staff-only since you can get ANY user's info with this endpoint.
     * To get the currently authenticated user, use `GET /user/`
     */
    public static getUserById<ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserByIdResponse, GetUserByIdError, ThrowOnError>({
            url: '/user/{id}/',
            ...options
        });
    }
    
}

export class VersionService {
    /**
     * Gets the current android version
     * **Required role: null**
     *
     * Note that this version can be set on the admin site
     */
    public static getVersionAndroid<ThrowOnError extends boolean = false>(options?: Options<GetVersionAndroidData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetVersionAndroidResponse, unknown, ThrowOnError>({
            url: '/version/android/',
            ...options
        });
    }
    
    /**
     * Sets the current android version
     * **Required role: ADMIN**
     */
    public static postVersionAndroidByVersion<ThrowOnError extends boolean = false>(options: Options<PostVersionAndroidByVersionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostVersionAndroidByVersionResponse, unknown, ThrowOnError>({
            url: '/version/android/{version}/',
            ...options
        });
    }
    
    /**
     * Gets the current ios version
     * **Required role: null**
     *
     * Note that this version can be set on the admin site
     */
    public static getVersionIos<ThrowOnError extends boolean = false>(options?: Options<GetVersionIosData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetVersionIosResponse, unknown, ThrowOnError>({
            url: '/version/ios/',
            ...options
        });
    }
    
    /**
     * Sets the current ios version
     * **Required role: ADMIN**
     */
    public static postVersionIosByVersion<ThrowOnError extends boolean = false>(options: Options<PostVersionIosByVersionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostVersionIosByVersionResponse, unknown, ThrowOnError>({
            url: '/version/ios/{version}/',
            ...options
        });
    }
    
}